[["\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(str,ch):\n    return str.replace(ch, \"\", 1).replace(ch, \"\", -1)\n"], ["\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n"], ["\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words):\n    \"\"\"\n    Count the most common words in a list of words.\n    \"\"\"\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n"], ["\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(base, height, length):\n    return (1/2)*base*height*length\n"], ["\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(s):\n    result = []\n    current = \"\"\n    for c in s:\n        if c.islower():\n            if current:\n                result.append(current)\n                current = \"\"\n        else:\n            current += c\n    if current:\n        result.append(current)\n    return result\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore.\n    \"\"\"\n    if not text:\n        return \"No match!\"\n    \n    # Find the first underscore\n    underscore_index = text.find(\"_\")\n    \n    # If there is no underscore, return \"No match!\"\n    if underscore_index == -1:\n        return \"No match!\"\n    \n    # Find the last underscore\n    last_underscore_index = text.rfind(\"_\")\n    \n    # If there is no underscore, return \"No match!\"\n    if last_underscore_index == -1:\n        return \"No match!\"\n    \n    # Extract the substring between the first and last underscore\n    substring = text[underscore_index+1:last_underscore_index]\n    \n    # Check if the substring contains only lowercase letters\n    if substring.islower():\n        return \"Found a match!\"\n    else:\n        return \"No match!\"\n"], ["\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(side):\n    return 4 * side\n"], ["\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(str1, str2):\n    return ''.join([i for i in str1 if i not in str2])\n"], ["\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    return len(arr) != len(set(arr))\n"], ["\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(num):\n    if num % 3 == 0 and num % 5 == 0:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n,m):\n    return [n*i for i in range(1,m+1)]\n"], ["\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n    \"\"\"\n    Find the first duplicate element in a given array of integers.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n"], ["\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(lst):\n    max_sum = 0\n    for i in lst:\n        for j in i:\n            if j > max_sum:\n                max_sum = j\n    return max_sum\n"], ["\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(binary):\n    decimal = 0\n    for i in range(len(binary)):\n        decimal += int(binary[i]) * 2**(len(binary)-1-i)\n    return decimal\n"], ["\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr, n):\n    # Initialize product\n    product = 1\n    # Iterate over the array\n    for i in range(n):\n        # If the element is not repeated\n        if arr.count(arr[i]) == 1:\n            # Multiply the product with the element\n            product *= arr[i]\n    return product\n\n# Test the function"], ["\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tuple_list, k):\n    for tup in tuple_list:\n        if len(tup) != k:\n            return False\n    return True\n"], ["\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove(lst):\n    return [''.join(filter(lambda x: not x.isdigit(), i)) for i in lst]\n"], ["\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n,k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n"], ["\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(arr, n):\n    # Create a dictionary to store the count of each element\n    count = {}\n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n    # Find the element occurring odd number of times\n    for key, value in count.items():\n        if value % 2 != 0:\n            return key\n\n# Test the function"], ["\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\nimport heapq\n\ndef func(lists, k):\n    heap = []\n    for lst in lists:\n        for num in lst:\n            if len(heap) < k:\n                heapq.heappush(heap, num)\n            else:\n                if num < heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, num)\n    return heap\n"], ["\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"], ["\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(n):\n    if n == 0:\n        return 0\n    else:\n        return (n % 2) + 10 * decimal_To_Binary(n // 2)\n"], ["\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(arr, n):\n    for i in range(n):\n        if arr[i] != i+1:\n            return i+1\n    return n+1\n"], ["\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    \"\"\"\n    Find the n-th rectangular number.\n    \"\"\"\n    return n * (n + 1) // 2\n"], ["\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(a,b,n):\n    \"\"\"\n    a,b: two positive integers\n    n: the nth digit\n    return: the nth digit in the proper fraction of a/b\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_Nth_Digit(b,a%b,n-1)\n"], ["\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(lst):\n    \"\"\"\n    Sort a given mixed list of integers and strings.\n    \"\"\"\n    return sorted(lst, key=lambda x: (isinstance(x, str), x))\n"], ["\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    for i in lst:\n        if i%2==0:\n            even_count+=1\n        else:\n            odd_count+=1\n    if even_count>odd_count:\n        return lst[0]//lst[1]\n    else:\n        return lst[1]//lst[0]\n"], ["\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(string):\n    # Write your code here\n    string = list(string)\n    string.sort()\n    string = ''.join(string)\n    return string\n"], ["\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\nfrom collections import Counter\n\ndef freq_element(lst):\n    return Counter(elem for sublist in lst for elem in sublist)\n"], ["\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(numbers):\n    return list(filter(lambda x: x%2==0, numbers))\n"], ["\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr, sum):\n    count = 0\n    for i in arr:\n        if sum - i in arr:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\nimport re\n\ndef text_match(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore using regex.\n    \"\"\"\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'No match found.'\n"], ["\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(text):\n    if text.startswith(\"python\"):\n        return (\"matched!\")\n    else:\n        return (\"Not matched!\")\n"], ["\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(arr):\n    \"\"\"\n    Find the gcd of the given array elements.\n    \"\"\"\n    gcd = arr[0]\n    for i in range(1, len(arr)):\n        gcd = math.gcd(gcd, arr[i])\n    return gcd\n"], ["\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(nums):\n    return len(nums) == len(set(nums))\n"], ["\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a,b):\n    \"\"\"\n    a: int\n    b: int\n    return: int\n    \"\"\"\n    if a == 0:\n        return 1\n    if a == 1:\n        return b\n    if b == 0:\n        return 0\n    if b == 1:\n        return a\n    if a == 2:\n        return b\n    if b == 2:\n        return a\n    if a == 3:\n        return b\n    if b == 3:\n        return a\n    if a == 4:\n        return b\n    if b == 4:\n        return a\n    if a == 5:\n        return b\n    if b == 5:\n        return a\n    if a == 6:\n        return b\n    if b == 6:\n        return a\n    if a == 7:\n        return b\n    if b == 7:\n        return a\n    if a == 8:\n        return b\n    if b == 8:\n        return a\n    if a == 9:\n        return b\n    if b == 9:\n        return a\n    if a == 10:\n        return b\n    if b == 10:\n        return a\n    if a == 11:\n        return b\n    if b == 11:\n        return a\n    if a == 12:\n        return b\n    if b == 12:\n        return a\n    if a == 13:\n        return b\n    if b == 13:\n        return a\n    if a == 14:\n        return b\n    if b == 14:\n        return a\n    if a == 15:\n        return b\n    if b == 15:\n        return a\n    if a == 16:\n        return b\n    if b == 16:\n        return a\n    if a == 17:\n        return b\n    if b == 17:\n        return a\n    if a == 18:\n        return b\n    if b == 18:\n        return a\n    if a == 19:\n        return b\n    if b == 19:\n        "], ["\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(number):\n    \"\"\"\n    This function sets all odd bits of a given number.\n    \"\"\"\n    # Convert the number to binary\n    binary_number = bin(number)[2:]\n    # Pad the binary number with zeros to make it 8 bits long\n    binary_number = binary_number.zfill(8)\n    # Set all odd bits to 1\n    binary_number = ''.join(['1' if i % 2 != 0 else '0' for i in range(len(binary_number))])\n    # Convert the binary number back to decimal\n    return int(binary_number, 2)\n"], ["\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(lst, index):\n    return [row[index] for row in lst]\n"], ["\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(lst):\n    return min(lst, key=lambda x: len(x))\n"], ["\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a,b,c):\n    if a==b==c:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(base,height):\n    return base*height\n"], ["\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(string):\n    if string[0] == string[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n"], ["\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    max_val = max(arr)\n    count = [0] * (max_val + 1)\n    for i in arr:\n        count[i] += 1\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    output = [0] * len(arr)\n    for i in arr[::-1]:\n        output[count[i] - 1] = i\n        count[i] -= 1\n    return output\n"], ["\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(a,n,r):\n    \"\"\"\n    a: first term\n    n: nth term\n    r: common ratio\n    \"\"\"\n    return a*(r**(n-1))\n"], ["\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(n):\n    rev = int(str(n)[::-1])\n    return n == 2*rev - 1\n"], ["\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits,n):\n    if n==0:\n        return 0\n    if n==1:\n        return max(digits)\n    \n    max_num = 0\n    for i in range(len(digits)):\n        temp = digits[i]\n        digits[i] = 0\n        rem = find_Max_Num(digits,n-1)\n        digits[i] = temp\n        max_num = max(max_num,temp*(10**(n-1))+rem)\n    return max_num\n"], ["\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(a,b):\n    if a*b < 0:\n        return True\n    else:\n        return False\n\n# Test Cases"], ["\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    \"\"\"\n    Returns True if n is an octagonal number, False otherwise.\n    \"\"\"\n    return ((3 + (1 + 8 * n) ** 0.5) / 4).is_integer()\n\ndef nth_octagonal(n):\n    \"\"\"\n    Returns the nth octagonal number.\n    \"\"\"\n    return int(((3 + (1 + 8 * n) ** 0.5) / 4) * n)\n"], ["\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] - arr[j] <= n:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n"], ["\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(s,n):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if sum(int(x) for x in s[i:j]) == j-i:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(nums):\n    smallest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n    return smallest\n"], ["\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(tuple_list):\n    max_diff = 0\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            diff = abs(tuple_list[i][0] - tuple_list[j][0]) + abs(tuple_list[i][1] - tuple_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"], ["\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(subjects):\n    return sorted(subjects, key=lambda x: x[1])\n"], ["\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(lst):\n    if isinstance(lst, int):\n        return lst\n    else:\n        return sum(recursive_list_sum(i) for i in lst)\n"], ["\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(lst):\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    bell = [0]*(n+1)\n    bell[0] = 1\n    bell[1] = 1\n    for i in range(2, n+1):\n        bell[i] = 0\n        for j in range(i):\n            bell[i] += bell[j]*bell[i-j-1]\n    return bell[n]\n"], ["\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    if len(arr) <= 1:\n        return True\n    \n    if arr[0] < arr[1]:\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i-1]:\n                return False\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i-1]:\n                return False\n    return True\n"], ["\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(lst, sublst):\n    for i in range(len(lst)):\n        if lst[i:i+len(sublst)] == sublst:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tuples, length):\n    for tup in tuples:\n        if len(tup) != length:\n            return 'Not all tuples have same length'\n    return 'All tuples have same length'\n"], ["\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(arr):\n    gap = len(arr)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        for i in range(len(arr) - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n    return arr\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(n):\n    for i in range(1, int(n**0.5)+1):\n        if (n-i*i)%(2*i) == 0:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\nimport re\n\ndef multiple_split(string, delimiters):\n    pattern = '|'.join(map(re.escape, delimiters))\n    return re.split(pattern, string)\n"], ["\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, seq):\n    if len(patterns) != len(seq):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i] != seq[i]:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(tuples, k):\n    return [t for t in tuples if all(i % k == 0 for i in t)]\n"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(length, width):\n    \"\"\"\n    Count the number of squares in a rectangle.\n    \"\"\"\n    return length * width\n"], ["\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff (num):\n    even_sum = 0\n    odd_sum = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even_sum += int(i)\n        else:\n            odd_sum += int(i)\n    return even_sum - odd_sum\n"], ["\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(n+1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    return len(word) % 2 == 0\n"], ["\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) / 6.0\n"], ["\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(t1, t2):\n    return list(zip(t1, t2))\n"], ["\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\ndef volume_sphere(radius):\n    return (4/3) * 3.14159 * (radius ** 3)\n"], ["\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(s):\n    return chr(sum(ord(c) for c in s))\n"], ["\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n"], ["\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    return 4 * 3.14 * radius ** 2\n"], ["\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    return n * (2 * n - 1)\n"], ["\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(d1, d2, d3):\n    \"\"\"\n    Merge three dictionaries into a single expression.\n    \"\"\"\n    return {**d1, **d2, **d3}\n"], ["\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(lst):\n    freq_dict = {}\n    for i in lst:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n"], ["\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n"], ["\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(lst):\n    return max([len(i) for i in lst])\n"], ["\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(lst, sub):\n    for i in lst:\n        if sub in i:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(1, len(s) - 1):\n        if s[i - 1] == s[i + 1]:\n            return False\n    \n    return True\n"], ["\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a,b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'\n    \"\"\"\n    return a**b\n"], ["\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tuples):\n    return min(tuples, key=lambda x: x[1])[0]\n"], ["\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(arr):\n    if len(arr) == 0:\n        return 0\n    min_len = len(arr[0])\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if j + min_len > len(arr[i]):\n                break\n            if len(arr[i][j:j+min_len]) < min_len:\n                min_len = len(arr[i][j:j+min_len])\n    return min_len\n"], ["\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lists):\n    freq_dict = {}\n    for lst in lists:\n        for elem in lst:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    return freq_dict\n"], ["\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(nums):\n    product = 1\n    for num in nums:\n        product *= num\n    return product/len(nums)\n"], ["\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return binary\n"], ["\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(n):\n    \"\"\"\n    Find the next smallest palindrome of a specified number.\n    \"\"\"\n    # Convert the number to a string\n    n_str = str(n)\n    # Reverse the string\n    n_rev_str = n_str[::-1]\n    # Initialize the smallest palindrome to be the number itself\n    smallest_palindrome = n\n    # Loop through all numbers greater than the number itself\n    for i in range(n+1, 10**len(n_str)):\n        # Convert the number to a string\n        i_str = str(i)\n        # Reverse the string\n        i_rev_str = i_str[::-1]\n        # Check if the number is a palindrome\n        if i_str == i_rev_str:\n            # Check if the number is smaller than the smallest palindrome\n            if i < smallest_palindrome:\n                # Update the smallest palindrome\n                smallest_palindrome = i\n    # Return the smallest palindrome\n    return smallest_palindrome\n"], ["\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(arr, k, n):\n    if n == 1:\n        return arr[0]\n    else:\n        pivot = arr[n-1]\n        left = [x for x in arr[:n-1] if x <= pivot]\n        right = [x for x in arr[:n-1] if x > pivot]\n        if k <= len(left):\n            return kth_element(left, k, len(left))\n        elif k <= len(left) + len(right):\n            return pivot\n        else:\n            return kth_element(right, k - len(left) - len(right), len(right))\n"], ["\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(s):\n    return ''.join(x.capitalize() or '_' for x in s.split('_'))\n"], ["\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    if n == 1:\n        return m\n    else:\n        return eulerian_num(n-1, m+1)\n"], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lst):\n    return [sorted(sublist, key=lambda x: x.lower()) for sublist in lst]\n"], ["\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count(lst):\n    return lst.count(True)\n"], ["\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(lists, tuples):\n    return tuples + lists\n"], ["\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if i >= 0 and i <= 15:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\nimport heapq\n\ndef merge_sorted_list(lists):\n    \"\"\"\n    :param lists: list of sorted lists\n    :return: iterator of merged sorted lists\n    \"\"\"\n    heap = []\n    for i, lst in enumerate(lists):\n        if lst:\n            heapq.heappush(heap, (lst[0], i, 0))\n    while heap:\n        val, list_idx, item_idx = heapq.heappop(heap)\n        yield val\n        if item_idx + 1 < len(lists[list_idx]):\n            heapq.heappush(heap, (lists[list_idx][item_idx + 1], list_idx, item_idx + 1))\n"], ["\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        if s[i] == '1':\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(lst, start, end):\n    \"\"\"\n    Extract the ranges that are missing from the given list with the given start range and end range values.\n    \"\"\"\n    # Sort the list of tuples\n    lst.sort()\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate over the list of tuples\n    for i in range(len(lst)):\n        # If the current tuple is the first tuple, add it to the result list\n        if i == 0:\n            result.append((lst[i][0], lst[i][1]))\n        # If the current tuple is not the first tuple, check if it is missing from the previous tuple\n        else:\n            if lst[i][0] <= result[-1][1]:\n                # If the current tuple is not missing from the previous tuple, check if it is missing from the next tuple\n                if lst[i][1] > result[-1][1]:\n                    # If the current tuple is missing from the previous tuple, add it to the result list\n                    result.append((result[-1][1], lst[i][0]))\n            # If the current tuple is missing from the previous tuple, add it to the result list\n            else:\n                result.append((lst[i][0], lst[i][1]))\n    \n    # Iterate over the result list\n    for i in range(len(result)):\n        # If the current tuple is the last tuple, add it to the result list\n        if i == len(result) - 1:\n            result.append((result[i][1], end))\n        # If the current tuple is not the last tuple, check if it is missing from the next tuple\n        else:\n            if result[i][1] < result[i+1]["], ["\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(lists):\n    common = []\n    for i in range(len(lists[0])):\n        for j in range(len(lists)):\n            if lists[j][i] in common:\n                continue\n            if lists[0][i] == lists[j][i]:\n                common.append(lists[j][i])\n    return common\n"], ["\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(radius, height):\n    \"\"\"\n    Calculate the perimeter of a cylinder\n    \"\"\"\n    return 2 * 3.14 * (radius + height)\n"], ["\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n"], ["\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(tuple_list):\n    freq_dict = {}\n    for tup in tuple_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    return [tup + (freq_dict[tup],) for tup in freq_dict]\n"], ["\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(list_of_dicts):\n    for d in list_of_dicts:\n        if len(d)>0:\n            return False\n    return True\n\n# Test"], ["\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    \"\"\"\n    Convert a tuple of positive integers into an integer.\n    \"\"\"\n    return int(''.join(map(str, tup)))\n"], ["\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(lst):\n    return [tuple(map(float, x)) for x in lst]\n"], ["\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(string):\n    return string.split()\n"], ["\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(arr, n):\n    # Write your code here\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] == n:\n            return arr[1]\n        if arr[1] == n:\n            return arr[0]\n        return None\n    if arr[0] == n:\n        return search(arr[1:], n)\n    if arr[-1] == n:\n        return search(arr[:-1], n)\n    if arr[len(arr)//2] == n:\n        return search(arr[:len(arr)//2], n)\n    if arr[len(arr)//2] != n:\n        return search(arr[len(arr)//2+1:], n)\n"], ["\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(tuples):\n    max_product = 0\n    for tup in tuples:\n        product = tup[0] * tup[1]\n        if product > max_product:\n            max_product = product\n    return max_product\n"], ["\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(arr, target, a, b, c):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return True\n    return False\n"], ["\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    if n == 1:\n        return 30\n    else:\n        return smartNumber(n-1) + smartNumber(n-2)\n"], ["\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(n):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to n.\n    \"\"\"\n    def sum_divisors(n):\n        \"\"\"\n        Returns the sum of all divisors of n.\n        \"\"\"\n        return sum(i for i in range(1, n) if n % i == 0)\n\n    def is_amicable(n):\n        \"\"\"\n        Returns True if n is amicable, False otherwise.\n        \"\"\"\n        return sum_divisors(n) == sum_divisors(sum_divisors(n)) and n != sum_divisors(n)\n\n    return sum(i for i in range(1, n+1) if is_amicable(i))\n"], ["\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\ndef angle_complex(z):\n    return cmath.phase(z)\n"], ["\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(s, n):\n    \"\"\"\n    :type s: str\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Initialize the maximum difference to 0\n    max_diff = 0\n    # Initialize the count of 0s and 1s to 0\n    count_0 = 0\n    count_1 = 0\n    # Iterate over the string\n    for i in range(len(s)):\n        # If the current character is 0, increment the count of 0s\n        if s[i] == '0':\n            count_0 += 1\n        # If the current character is 1, increment the count of 1s\n        else:\n            count_1 += 1\n        # If the difference between the counts of 0s and 1s is greater than the maximum difference, update the maximum difference\n        if abs(count_0 - count_1) > max_diff:\n            max_diff = abs(count_0 - count_1)\n        # If the count of 0s becomes greater than n, reset the count of 0s to n\n        if count_0 > n:\n            count_0 = n\n        # If the count of 1s becomes greater than n, reset the count of 1s to n\n        if count_1 > n:\n            count_1 = n\n    # Return the maximum difference\n    return max_diff\n"], ["\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_common_divisors(a,b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    common_divisors = []\n    for i in range(1, min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)\n"], ["\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(x,y):\n    \"\"\"\n    Multiply two integers without using the * operator\n    \"\"\"\n    if y == 0:\n        return 0\n    elif y > 0:\n        return x + multiply_int(x,y-1)\n    else:\n        return -multiply_int(x,-y)\n"], ["\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n,words):\n    return [word for word in words.split() if len(word)>n]\n"], ["\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(matrix):\n    \"\"\"\n    This function takes a matrix as input and returns True if it is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    magic_sum = sum(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) != magic_sum:\n            return False\n        if sum(matrix[j][i] for j in range(n)) != magic_sum:\n            return False\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    if sum(matrix[i][n-i-1] for i in range(n)) != magic_sum:\n        return False\n    return True\n"], ["\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(lst):\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    max_val = max(d.values())\n    for key, value in d.items():\n        if value == max_val:\n            return key, value\n"], ["\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(s):\n    vowels = set(\"aeiouAEIOU\")\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return \"\".join(s)\n"], ["\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n    return ''.join(tup)\n"], ["\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\n# Solution\nsum_negativenum = lambda lst: sum(filter(lambda x: x < 0, lst))"], ["\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr,p,q):\n    for i in range(p):\n        arr.append(arr[-1] + q)\n    return \"EVEN\" if arr[-1]%2 == 0 else \"ODD\"\n"], ["\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    return n*(2*n-1)\n"], ["\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(rate):\n    \"\"\"\n    Calculate electricity bill\n    \"\"\"\n    return rate * 0.12\n"], ["\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(arr):\n    count = 0\n    for i in arr:\n        if i == 0:\n            count += 1\n    return count/len(arr)\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 1:\n        return False\n    return is_Sum_Of_Powers_Of_Two(n // 2) or is_Sum_Of_Powers_Of_Two(n // 2 - 1)\n"], ["\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    return 2 * 3.14 * radius\n"], ["\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(tuple_list):\n    \"\"\"\n    Extract elements that occur singly in the given tuple list.\n    \"\"\"\n    result = []\n    for tup in tuple_list:\n        for elem in tup:\n            if tup.count(elem) == 1:\n                result.append(elem)\n    return result\n"], ["\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(arr):\n    n = len(arr)\n    for i in range(n-1, 0, -1):\n        max_idx = arr.index(max(arr[:i+1]))\n        if max_idx != i:\n            arr = arr[:max_idx+1][::-1] + arr[max_idx+1:i+1] + arr[i+1:][::-1]\n        else:\n            arr = arr[:i+1][::-1] + arr[i+1:][::-1]\n    return arr\n"], ["\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(list1,list2,list3):\n    count=0\n    for i in list1:\n        if i in list2 and i in list3:\n            count+=1\n    return count\n"], ["\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(tup):\n    count = 0\n    for i in tup:\n        if isinstance(i, list):\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr,k):\n    \"\"\"\n    :param arr: list of integers\n    :param k: integer\n    :return: sum of absolute differences in all pairs of the given array\n    \"\"\"\n    arr.sort()\n    sum_ = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if abs(arr[i]-arr[j]) == k:\n                sum_ += abs(arr[i]-arr[j])\n    return sum_\n"], ["\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(arr, n):\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"], ["\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(string):\n    return sum(ord(c) for c in string)\n"], ["\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, row, col):\n    if row == len(triangle) - 1:\n        return triangle[row][col]\n    left_sum = max_path_sum(triangle, row + 1, col)\n    right_sum = max_path_sum(triangle, row + 1, col + 1)\n    return triangle[row][col] + max(left_sum, right_sum)\n"], ["\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    n = str(n)\n    n = list(n)\n    n.sort(reverse=True)\n    return int(n[0]) + int(n[1])\n"], ["\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n"], ["\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(a,b,c):\n    \"\"\"\n    a,b,c are the first three numbers of the infinite sequence\n    \"\"\"\n    if a == b:\n        return False\n    elif a == c:\n        return True\n    elif a == b + c:\n        return True\n    else:\n        return does_Contain_B(b,c,a+b+c)\n"], ["\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(a,b):\n    if a == 0 or b == 0:\n        return False\n    for i in range(2, min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result\n"], ["\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a, b, c):\n    x = -b / (2 * a)\n    y = a * x ** 2 + b * x + c\n    return (x, y)\n"], ["\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(two_d_list, index):\n    return [row[index] for row in two_d_list]\n"], ["\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(n):\n    \"\"\"\n    Toggle all even bits of a given number.\n    \"\"\"\n    # Convert the number to binary\n    binary = bin(n)[2:]\n    # Reverse the binary string\n    reversed_binary = binary[::-1]\n    # Toggle all even bits\n    toggled_binary = ''.join(['0' if bit == '1' else '1' for bit in reversed_binary])\n    # Convert the toggled binary string back to an integer\n    toggled_number = int(toggled_binary[::-1], 2)\n    return toggled_number\n"], ["\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\ndef tuple_int_str(tup):\n    return tuple(map(int, tup))\n"], ["\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(l):\n    \"\"\"\n    :type l: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n    if not l:\n        return []\n    res = []\n    curr = l[0]\n    count = 1\n    for i in range(1, len(l)):\n        if l[i] == curr:\n            count += 1\n        else:\n            res.append([count, curr])\n            curr = l[i]\n            count = 1\n    res.append([count, curr])\n    return res\n\ndef encode_list_2(l):\n    \"\"\"\n    :type l: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n    if not l:\n        return []\n    res = []\n    curr = l[0]\n    count = 1\n    for i in range(1, len(l)):\n        if l[i] == curr:\n            count += 1\n        else:\n            res.append([count, curr])\n            curr = l[i]\n            count = 1\n    res.append([count, curr])\n    return res\n\ndef encode_list_3(l):\n    \"\"\"\n    :type l: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n    if not l:\n        return []\n    res = []\n    curr = l[0]\n    count = 1\n    for i in range(1, len(l)):\n        if l[i] == curr:\n            count += 1\n        else:\n            res.append([count, curr])\n            curr = l[i]\n            count = 1\n    res.append([count, curr])\n    return res\n\ndef encode_list_4"], ["\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr, k, n):\n    # Write your code here\n    if k == 0:\n        return 0\n    if n == 1:\n        return 0\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        return abs(arr[0] - arr[1])\n    if len(arr) == 3:\n        return abs(arr[0] - arr[1]) + abs(arr[1] - arr[2])\n    if len(arr) == 4:\n        return abs(arr[0] - arr[1]) + abs(arr[1] - arr[2]) + abs(arr[2] - arr[3])\n    if len(arr) == 5:\n        return abs(arr[0] - arr[1]) + abs(arr[1] - arr[2]) + abs(arr[2] - arr[3]) + abs(arr[3] - arr[4])\n    if len(arr) == 6:\n        return abs(arr[0] - arr[1]) + abs(arr[1] - arr[2]) + abs(arr[2] - arr[3]) + abs(arr[3] - arr[4]) + abs(arr[4] - arr[5])\n    if len(arr) == 7:\n        return abs(arr[0] - arr[1]) + abs(arr[1] - arr[2]) + abs(arr[2] - arr[3]) + abs(arr[3] - arr[4]) + abs(arr[4] - arr[5]) + abs(arr[5] - arr[6])\n    if len(arr) == 8:\n        return abs(arr[0] - arr[1]) + abs(arr[1] - arr[2]) + abs(arr[2] - arr[3]) + abs(arr[3] - arr[4]) + abs(arr[4] - arr[5]) + abs(arr[5] - arr[6]) + abs(arr[6]"], ["\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month, day):\n    if month in ['December', 'January', 'February']:\n        return 'winter'\n    elif month in ['March', 'April', 'May']:\n        return 'spring'\n    elif month in ['June', 'July', 'August']:\n        return 'summer'\n    elif month in ['September', 'October', 'November']:\n        return 'fall'\n    else:\n        return 'Invalid month'\n"], ["\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    x = n // a\n    y = (n - a * x) // b\n    return (f'x = {x}, y = {y}', x, y)\n"], ["\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(list1,list2):\n    for i in list2:\n        list1.remove(i)\n    return list1\n"], ["\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n    sum = 0\n    for i in range(n, 0, -2):\n        sum += i\n    return sum\n"], ["\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(n,s):\n    \"\"\"\n    n: number of sides\n    s: side length\n    \"\"\"\n    return (n*s**2)/(4*math.tan(math.pi/n))\n"], ["\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(n, m):\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum1 += i\n    for i in range(1, m+1):\n        if m % i == 0:\n            sum2 += i\n    return sum1 == sum2\n"], ["\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i].lower() == chr(i+97) or string[i].upper() == chr(i+65):\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr, x):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                count += 1\n    return count\n\n# Driver code\narr = [5,4,7,2,1]\nx = 5"], ["\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n - 1)\n"], ["\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(arr, num):\n    count = 0\n    for i in arr:\n        if i == num:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    \"\"\"\n    Calculate the nth pell number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return get_pell(n-1) + get_pell(n-2)\n"], ["\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(lst, start, end):\n    return sum(lst[start:end])\n"], ["\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(n):\n    return 5*n\n"], ["\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+3] == \"std\":\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\ndef remove_splchar(string):\n    return ''.join(e for e in string if e.isalnum())\n"], ["\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(seq):\n    d = {}\n    for k, v in seq:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d\n"], ["\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(s):\n    stack = []\n    for i in s:\n        if i in \"({[\":\n            stack.append(i)\n        else:\n            if not stack:\n                return False\n            if i == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif i == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif i == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    return not stack\n"], ["\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a,b,c):\n    return a+b+c\n"], ["\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(a,b):\n    lcm = a*b//gcd(a,b)\n    for i in range(lcm,b+1,lcm):\n        if i%a == 0 and i%b == 0:\n            return (a,i//a)\n    return (a,b)\n\ndef gcd(a,b):\n    while b:\n        a,b = b,a%b\n    return a\n"], ["\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(literals,string):\n    for literal in literals:\n        if literal in string:\n            return ('Matched!')\n    return ('Not matched!')\n"], ["\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(num):\n    \"\"\"\n    :param num: int\n    :return: bool\n    \"\"\"\n    if num == 0:\n        return False\n    if num == 1:\n        return True\n    if num % 2 == 0:\n        return is_num_keith(num // 2)\n    else:\n        return is_num_keith(3 * num + 1)\n"], ["\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1,long1,lat2,long2):\n    \"\"\"\n    Calculate distance between two points using latitude and longitude.\n    \"\"\"\n    earth_radius = 6371 # km\n    lat1,long1,lat2,long2 = map(radians, [lat1,long1,lat2,long2])\n    dlat = lat2 - lat1\n    dlong = long2 - long1\n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlong/2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1-a))\n    distance = earth_radius * c\n    return distance\n"], ["\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(strs, n):\n    if n == 0:\n        return \"\"\n    prefix = strs[0][:n]\n    for i in range(1, len(strs)):\n        if strs[i][:n] != prefix:\n            return prefix\n    return prefix\n"], ["\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\nimport re\n\ndef find_character(string):\n    upper_case = re.findall('[A-Z]', string)\n    lower_case = re.findall('[a-z]', string)\n    special_char = re.findall('[^a-zA-Z0-9]', string)\n    numeric = re.findall('[0-9]', string)\n    return (upper_case, lower_case, special_char, numeric)\n"], ["\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(lst, num):\n    return [i for i in lst if i > num]\n"], ["\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a, b, c):\n    \"\"\"\n    a: coefficient of x^2\n    b: coefficient of x\n    c: constant term\n    \"\"\"\n    p = (b**2) - (4*a*c)\n    x1 = (-b + (p**0.5))/(2*a)\n    x2 = (-b - (p**0.5))/(2*a)\n    y1 = a*x1**2 + b*x1 + c\n    y2 = a*x2**2 + b*x2 + c\n    if y1 > y2:\n        return (x1, y1)\n    else:\n        return (x2, y2)\n"], ["\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\nimport re\n\ndef check_literals(text, literals):\n    \"\"\"\n    Check if literals are in text.\n    \"\"\"\n    for literal in literals:\n        if re.search(literal, text):\n            return 'Matched!'\n    return 'Not matched!'\n"], ["\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(seq1, seq2, m, n):\n    # base case\n    if m == 0 or n == 0:\n        return 0\n    # if last characters of both strings are same\n    if seq1[m-1] == seq2[n-1]:\n        return 1 + longest_common_subsequence(seq1, seq2, m-1, n-1)\n    # if last characters of both strings are not same\n    else:\n        return max(longest_common_subsequence(seq1, seq2, m, n-1),\n                   longest_common_subsequence(seq1, seq2, m-1, n))\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(n):\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            j = n // i\n            if i**2 == j**2:\n                return True\n    return False\n"], ["\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(arr, n):\n    for i in range(n):\n        while arr[i] > 0 and arr[i] <= n and arr[i] != arr[arr[i]-1]:\n            arr[arr[i]-1], arr[i] = arr[i], arr[arr[i]-1]\n    for i in range(n):\n        if arr[i] != i+1:\n            return i+1\n    return n+1\n"], ["\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x1,y1,x2,y2):\n    count = 0\n    for i in range(x1,x2+1):\n        for j in range(y1,y2+1):\n            if i**2 + j**2 <= (x2-x1)**2 + (y2-y1)**2:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month):\n    month_days = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    return month_days[month] == 30\n"], ["\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(s):\n    if any(char.isdigit() for char in s) and any(char.isalpha() for char in s):\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(tup):\n    return tuple(set(tup))\n"], ["\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal):\n    decimal = 0\n    for i in range(len(octal)):\n        decimal += int(octal[i]) * pow(8, len(octal) - i - 1)\n    return decimal\n"], ["\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(arr, x, n):\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"], ["\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(lst, k):\n    return [i for i in lst if len(i) != k]\n"], ["\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] ** tuple2[i])\n    return tuple(result)\n"], ["\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\nimport math\n\ndef largest_triangle(a,b):\n    \"\"\"\n    a: semi-major axis\n    b: semi-minor axis\n    \"\"\"\n    # find the largest inscribed triangle\n    # using the formula: area = (a*b)/2\n    # and the Pythagorean theorem: c^2 = a^2 + b^2 - 2ab*cos(theta)\n    # where theta is the angle between the semi-major axis and the hypotenuse\n    # we want to maximize theta, so we take the derivative of c^2 with respect to theta\n    # and set it to zero to find the critical point\n    # then we check the endpoints of theta to see which one gives the largest area\n    # theta = math.asin(b/a)\n    # c^2 = a^2 + b^2 - 2ab*cos(theta)\n    # d(c^2)/d(theta) = -2ab*sin(theta)\n    # set to zero and solve for theta\n    # -2ab*sin(theta) = 0\n    # sin(theta) = 0\n    # theta = 0 or pi\n    # we want theta = pi, so we take the derivative of c^2 with respect to theta\n    # and set it to zero\n    # d(c^2)/d(theta) = -2ab*cos(theta)\n    # -2ab*cos(theta) = 0\n    # cos(theta) = 0\n    # theta = pi/2\n    # then we plug in theta into the formula for c^2\n    # c^2 = a^2 + b^2 - 2ab*cos(theta)\n    # c^2 = a^2 + b^2 - 2ab*cos(pi/2)\n    # c^2 = a^2 + b^2 - 2ab\n    # c = sqrt(a^2 + b^2 - 2ab)\n    # then we plug in c"], ["\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    power = 0\n    while 2**power <= n:\n        power += 1\n    return 2**(power-1)\n"], ["\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(lst):\n    max_val = max(lst)\n    return [i for i, x in enumerate(lst) if x == max_val]\n"], ["\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(lst):\n    return len(set(lst)) == 1\n"], ["\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(s):\n    return ''.join([i for i in s if int(i)%2!=0])\n"], ["\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_distance(x, y):\n    \"\"\"\n    Calculate the hamming distance between two integers.\n    \"\"\"\n    return bin(x ^ y).count('1')\n"], ["\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(string, char):\n    count = 0\n    for i in string:\n        if i == char:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(tuple_list):\n    inversion_list = []\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            if tuple_list[i] > tuple_list[j]:\n                inversion_list.append((tuple_list[i], tuple_list[j]))\n    return inversion_list\n"], ["\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\ndef concatenate_elements(tup):\n    return tuple(map(lambda x: x[0] + x[1], zip(tup[:-1], tup[1:])))\n"], ["\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][n]\n\n"], ["\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\nimport re\n\ndef is_decimal(decimal):\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, decimal))\n"], ["\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(heap, item):\n    \"\"\"\n    Delete the smallest element from the given heap and then insert a new item.\n    \"\"\"\n    if len(heap) == 0:\n        return heap\n    else:\n        smallest = heap[0]\n        heap[0] = item\n        i = 0\n        while i < len(heap):\n            left = 2 * i + 1\n            right = 2 * i + 2\n            if left < len(heap) and heap[left] < heap[i]:\n                smallest = heap[left]\n            else:\n                smallest = heap[i]\n            if right < len(heap) and heap[right] < smallest:\n                smallest = heap[right]\n            if smallest == heap[i]:\n                break\n            heap[i] = smallest\n            i += 1\n        return heap\n"], ["\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\nimport re\n\ndef is_allowed_specific_char(string):\n    pattern = re.compile(r'[^a-zA-Z0-9]')\n    string = pattern.sub('', string)\n    return len(string) == len(string.replace(\" \", \"\"))\n"], ["\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(n):\n    count = 0\n    for i in range(n):\n        if ((i & 1) == 1) and ((i & 2) == 2):\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum\n"], ["\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(tuple1, tuple2):\n    return tuple(map(lambda x, y: x + \" \" + y, tuple1, tuple2))\n"], ["\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(radian):\n    return radian*180/3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n"], ["\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(l):\n    res = []\n    for i in l:\n        if type(i) == list:\n            res += [i[0]]*i[1]\n        else:\n            res.append(i)\n    return res\n"], ["\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(list1, list2):\n    for i in list1:\n        if i not in list2:\n            return False\n    return True\n"], ["\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(string):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            if string[i] == string[j]:\n                return string[i]\n    return None\n"], ["\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_operations(a,b):\n    if a == b:\n        return 0\n    elif a > b:\n        return min_operations(a-b, b) + 1\n    else:\n        return min_operations(a, b-a) + 1\n"], ["\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(tup, k):\n    \"\"\"\n    Extracts the minimum and maximum k elements from the given tuple.\n    \"\"\"\n    return tuple(sorted(tup)[:k]) + tuple(sorted(tup)[-k:])\n"], ["\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(string, n):\n    \"\"\"\n    :param string: string to be modified\n    :param n: number of maximum occurrences of special characters to be replaced\n    :return: modified string\n    \"\"\"\n    special_chars = [' ', ',', '.']\n    for char in special_chars:\n        string = string.replace(char, ':', n)\n    return string\n"], ["\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(numbers):\n    for number in numbers:\n        if number % 2 == 0:\n            return number\n    return None\n"], ["\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tup):\n    \"\"\"\n    This function takes a tuple as input and checks if all the elements in the tuple have same data type or not.\n    \"\"\"\n    return len(set(map(type, tup))) == 1\n"], ["\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n# Driver code\nn = 2"], ["\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr,low,high):\n    if low == high:\n        return arr[low]\n    mid = (low+high)//2\n    if mid < high and arr[mid] > arr[mid+1]:\n        return arr[mid+1]\n    if mid > low and arr[mid] < arr[mid-1]:\n        return arr[mid-1]\n    if arr[low] > arr[mid]:\n        return find_Min(arr,low,mid-1)\n    return find_Min(arr,mid+1,high)\n\ndef find_Min_recursive(arr,low,high):\n    if low == high:\n        return arr[low]\n    mid = (low+high)//2\n    if mid < high and arr[mid] > arr[mid+1]:\n        return arr[mid+1]\n    if mid > low and arr[mid] < arr[mid-1]:\n        return arr[mid-1]\n    if arr[low] > arr[mid]:\n        return find_Min_recursive(arr,low,mid-1)\n    return find_Min_recursive(arr,mid+1,high)\n\ndef find_Min_iterative(arr,low,high):\n    if low == high:\n        return arr[low]\n    while low < high:\n        mid = (low+high)//2\n        if mid < high and arr[mid] > arr[mid+1]:\n            return arr[mid+1]\n        if mid > low and arr[mid] < arr[mid-1]:\n            return arr[mid-1]\n        if arr[low] > arr[mid]:\n            low = mid+1\n        else:\n            high = mid-1\n    return arr[low]\n\ndef find_Min_iterative_2(arr,low,high):\n    if low == high:\n        return arr[low]\n    while low < high:\n        mid = (low+high)//2\n        if arr"], ["\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(string):\n    return string[::2]\n"], ["\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n"], ["\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(start, end, length):\n    for i in range(start, end+1):\n        if i & (1 << length):\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, n):\n    neg_arr = []\n    pos_arr = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n    return neg_arr + pos_arr\n"], ["\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\ndef replace_blank(string,char):\n    return string.replace(\" \",\"@\")\n"], ["\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(triangle, row):\n    if row == 0:\n        return triangle[0][0]\n    else:\n        return triangle[row][0] + max(max_sum(triangle, row-1), max_sum(triangle, row-1))\n"], ["\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(dataset, n):\n    return sorted(dataset, reverse=True)[:n]\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\ndef lateralsuface_cylinder(radius, height):\n    pi = 3.14159265358979323846\n    lateral_surface_area = 2 * pi * radius * height\n    return lateral_surface_area\n"], ["\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(side):\n    return side**3\n"], ["\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(n):\n    return n | (n >> 1)\n"], ["\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(n,m):\n    \"\"\"\n    n: side of the equilateral triangle\n    m: side of the smaller equilateral triangle\n    \"\"\"\n    if n<=0 or m<=0:\n        return 0\n    if n<=m:\n        return 0\n    if n==m:\n        return 1\n    if n==2*m:\n        return 3\n    if n==3*m:\n        return 6\n    if n==4*m:\n        return 10\n    if n==5*m:\n        return 15\n    if n==6*m:\n        return 21\n    if n==7*m:\n        return 28\n    if n==8*m:\n        return 36\n    if n==9*m:\n        return 45\n    if n==10*m:\n        return 55\n    if n==11*m:\n        return 66\n    if n==12*m:\n        return 78\n    if n==13*m:\n        return 91\n    if n==14*m:\n        return 105\n    if n==15*m:\n        return 120\n    if n==16*m:\n        return 136\n    if n==17*m:\n        return 153\n    if n==18*m:\n        return 171\n    if n==19*m:\n        return 190\n    if n==20*m:\n        return 210\n    if n==21*m:\n        return 231\n    if n==22*m:\n        return 252\n    if n==23*m:\n        return 276\n    if n==24*m:\n        return 300\n    if n==25*m:\n        return 325\n    if n==26*m:\n        return 351\n    if n==27*m:\n        return 378\n    if n==28*m:\n        return 396\n    if n==29*m:\n        return 435\n    if n==30*m:\n        return 462\n    if n==31*m:\n"], ["\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(tuples):\n    occurences = {}\n    for tup in tuples:\n        if tup[0] in occurences:\n            occurences[tup[0]] += 1\n        else:\n            occurences[tup[0]] = 1\n    return occurences\n"], ["\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return m\n    if n == 2:\n        return m * m\n    if n == 3:\n        return m * m * m\n    if n == 4:\n        return m * m * m * m\n    if n == 5:\n        return m * m * m * m * m\n    if n == 6:\n        return m * m * m * m * m * m\n    if n == 7:\n        return m * m * m * m * m * m * m\n    if n == 8:\n        return m * m * m * m * m * m * m * m\n    if n == 9:\n        return m * m * m * m * m * m * m * m * m\n    if n == 10:\n        return m * m * m * m * m * m * m * m * m * m\n    return 0\n"], ["\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(lst, new_list):\n    lst[-1] = new_list\n    return lst\n"], ["\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(n,m,k):\n    return [[['*' for i in range(k)] for j in range(m)] for i in range(n)]\n"], ["\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(string):\n    return len(string)\n"], ["\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(lst):\n    \"\"\"\n    Sort the given list based on the occurrence of first element of tuples.\n    \"\"\"\n    return sorted(lst, key=lambda x: lst.count(x[0]))\n"], ["\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(n):\n    i = 1\n    while True:\n        i += 1\n        if i*i > n:\n            return i*i\n"], ["\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n    # Initialize the first two elements of the array\n    max_sum = arr[0]\n    max_sum_ending_here = arr[0]\n    \n    # Iterate over the array\n    for i in range(1, n):\n        # Update the maximum sum ending at the current index\n        max_sum_ending_here = max(arr[i], max_sum_ending_here + arr[i])\n        \n        # Update the maximum sum overall\n        max_sum = max(max_sum, max_sum_ending_here)\n    \n    return max_sum\n"], ["\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(x):\n    \"\"\"\n    Compute the square root of x using the babylonian method.\n    \"\"\"\n    guess = x/2\n    while abs(guess**2 - x) > 0.000001:\n        guess = (guess + x/guess)/2\n    return guess\n"], ["\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n"], ["\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \"\"\"\n    return sum([1/i for i in range(1, n)])\n"], ["\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))\n"], ["\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(lst, element):\n    new_lst = []\n    for i in lst:\n        new_lst.append(element)\n        new_lst.append(i)\n    return new_lst\n"], ["\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(z):\n    r = abs(z)\n    theta = cmath.phase(z)\n    return r, theta\n"], ["\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(s):\n    return [word for word in s.split() if word[0] in 'ae']\n"], ["\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colors, n):\n    return list(itertools.product(colors, repeat=n))\n"], ["\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(a,b):\n    return b,a\n"], ["\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\n# Solution:\ncount_odd = lambda lst: len(list(filter(lambda x: x%2!=0, lst)))"], ["\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(tuple1, tuple2):\n    \"\"\"\n    :param tuple1: a tuple of tuples\n    :param tuple2: a tuple of tuples\n    :return: a tuple of tuples\n    \"\"\"\n    max_tuple = []\n    for i in range(len(tuple1)):\n        max_tuple.append(max(tuple1[i], tuple2[i]))\n    return tuple(max_tuple)\n"], ["\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n    \"\"\"\n    Find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        p = 2\n        q = 3\n        r = 5\n        s = 7\n        t = 11\n        u = 13\n        v = 17\n        w = 19\n        x = 23\n        y = 29\n        z = 31\n        a = 1\n        b = 1\n        c = 1\n        d = 1\n        e = 1\n        f = 1\n        g = 1\n        h = 1\n        i = 1\n        j = 1\n        k = 1\n        l = 1\n        m = 1\n        n = 1\n        o = 1\n        p = 1\n        q = 1\n        r = 1\n        s = 1\n        t = 1\n        u = 1\n        v = 1\n        w = 1\n        x = 1\n        y = 1\n        z = 1\n        while n > 0:\n            if n % 2 == 0:\n                n = n // 2\n                p = p * (p - 1)\n                q = q * (q - 1)\n            elif n % 3 == 0:\n                n = n // 3\n                r = r * (r - 1)\n                s = s * (s - 1)\n            elif n % 5 == 0:\n                n = n // 5\n                t = t * (t - 1)\n                u = u * (u - 1)\n            elif n % 7 == 0:\n                n = n // 7\n                v = v * (v - 1)\n                w = w * (w - 1)\n            elif n % 11 == 0:\n                n = n // 11\n                x = x * (x - 1)\n                y = y * (y - 1)\n            elif n % 13 == 0:\n                n = n // 13\n                z = z * (z - 1)\n"], ["\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(t1, t2):\n    return tuple(x/y for x, y in zip(t1, t2))\n"], ["\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(arr, n):\n    return arr[:n], arr[n:]\n"], ["\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1, dict2):\n    \"\"\"\n    Merge two dictionaries\n    \"\"\"\n    return {**dict1, **dict2}\n"], ["\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(age):\n    if age == 0:\n        return 0\n    elif age == 1:\n        return 15\n    else:\n        return 15 + (age - 1) * 4\n"], ["\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(edge):\n    return 6*edge**2\n"], ["\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum\n"], ["\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    \"\"\"\n    Find the n'th star number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * find_star_num(n - 1) + 1\n"], ["\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n"], ["\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(arr, n):\n    sum = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n"], ["\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum\n"], ["\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(records):\n    return [record[2] for record in records]\n"], ["\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(t1, t2):\n    return tuple(x - y for x, y in zip(t1, t2))\n"], ["\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Returns sum of even index binomial coefficients.\n    \"\"\"\n    return sum(binomial_Coeff(n, i) for i in range(0, n+1, 2))\n"], ["\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr, x, y):\n    if x not in arr:\n        return -1\n    else:\n        arr.remove(x)\n        arr.remove(y)\n        return arr.index(x)\n"], ["\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(radius, height):\n    return 3.14 * radius * radius * height\n"], ["\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(d,value):\n    return {k:v for k,v in d.items() if v==value}\n"], ["\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(tup):\n    count = 0\n    for i in tup:\n        if isinstance(i, tuple):\n            count += count_first_elements(i)\n        else:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    return ((3*n**2 - n) * (n**2 - 2*n + 1)) // 2 == n\n\ndef nth_decagonal(n):\n    return ((3*n**2 - n) * (n**2 - 2*n + 1)) // 2\n"], ["\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return (True, i)\n    return (False, -1)\n"], ["\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n    return len(lst) == len(set(lst))\n"], ["\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(list1,list2):\n    return list(map(lambda x,y: x-y,list1,list2))\n"], ["\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(num):\n    freq = [0] * 10\n    for digit in str(num):\n        freq[int(digit)] += 1\n    for i in range(10):\n        if freq[i] > i:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(lst, element):\n    for i in lst:\n        if i != element:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    if len(text) == 2:\n        return ('Not matched!')\n    elif len(text) == 3:\n        if text[0] == 'a' and text[1] == 'b' and text[2] == 'b':\n            return ('Matched!')\n        else:\n            return ('Not matched!')\n    else:\n        return ('Not matched!')\n"], ["\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    :param arr: array of integers\n    :param k: number of times array is repeated\n    :param n: length of array\n    :return: maximum sum of contiguous subarray in the modified array\n    \"\"\"\n    # write your code here\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i, n):\n            sub_arr = arr[i:j+1]\n            sub_arr_sum = sum(sub_arr)\n            max_sum = max(max_sum, sub_arr_sum)\n    return max_sum * k\n\n"], ["\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**2\n    return sum\n"], ["\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(arr, p, q):\n    \"\"\"\n    :param arr: list of integers\n    :param p: prime number\n    :param q: prime number\n    :return: count of elements in arr having modular inverse under p equal to itself\n    \"\"\"\n    count = 0\n    for i in arr:\n        if pow(i, p-1, p) == 1:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    \"\"\"\n    This function takes a year as input and returns the number of odd days in that year.\n    \"\"\"\n    odd_days = 0\n    for month in range(1, 13):\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            odd_days += 31\n        elif month in [4, 6, 9, 11]:\n            odd_days += 30\n        else:\n            odd_days += 29\n    return odd_days\n"], ["\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(lst):\n    max_length = 0\n    max_length_list = []\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_length_list = [i]\n        elif len(i) == max_length:\n            max_length_list.append(i)\n    return max_length, max_length_list\n"], ["\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    if n == 2:\n        return k * (k - 1)\n    return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k)\n"], ["\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(a,b):\n    return a//b\n"], ["\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\ndef otherside_rightangle(a,b):\n    return (a**2 + b**2)**0.5\n"], ["\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(lst):\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val\n"], ["\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(n):\n    sum = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            sum += i\n    return sum\n"], ["\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n"], ["\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(nested_list):\n    \"\"\"\n    Flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list\n"], ["\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list1, list2):\n    result = []\n    for i in list1:\n        if i in list2:\n            result.append([i])\n    return result\n"], ["\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(lst):\n    d = {}\n    for k,v in lst:\n        if k in d:\n            d[k] += v\n        else:\n            d[k] = v\n    return max(d.items(), key=lambda x: x[1])\n"], ["\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    if n == 1:\n        return 2\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2)\n"], ["\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n"], ["\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(n):\n    \"\"\"\n    Find the most significant bit number which is also a set bit.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return int(n & -n)\n"], ["\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef count_inversion(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n\ndef solve(arr1, arr2):\n    return count_inversion(arr1) == count_inversion(arr2)\n"], ["\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(arr, rotations, index, k):\n    rotations = rotations[index]\n    for i in range(rotations[0]):\n        arr.insert(0, arr.pop())\n    for i in range(rotations[1]):\n        arr.append(arr.pop(0))\n    return arr[k]\n"], ["\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    p_words = []\n    for word in words:\n        if word.startswith('p'):\n            p_words.append(word)\n    return p_words\n"], ["\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, k, i, n):\n    if i == n:\n        return 0\n    if arr[i] > arr[k] and arr[i] > arr[i+1]:\n        return arr[i] + max_sum_increasing_subseq(arr, k, i+1, n)\n    else:\n        return max(arr[i] + max_sum_increasing_subseq(arr, k, i+1, n), max_sum_increasing_subseq(arr, k, i+1, n))\n\ndef max_sum_increasing_subseq_dp(arr, k, i, n):\n    if i == n:\n        return 0\n    if arr[i] > arr[k] and arr[i] > arr[i+1]:\n        return arr[i] + max_sum_increasing_subseq_dp(arr, k, i+1, n)\n    else:\n        return max(arr[i] + max_sum_increasing_subseq_dp(arr, k, i+1, n), max_sum_increasing_subseq_dp(arr, k, i+1, n))\n\ndef max_sum_increasing_subseq_dp_v2(arr, k, i, n):\n    if i == n:\n        return 0\n    if arr[i] > arr[k] and arr[i] > arr[i+1]:\n        return arr[i] + max_sum_increasing_subseq_dp_v2(arr, k, i+1, n)\n    else:\n        return max(arr[i] + max_sum_increasing_subseq_dp_v2(arr, k, i+1, n), max_sum_increasing_subseq_dp_v2(arr, k, i+1, n))\n\ndef max_sum"], ["\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tuplex, index, value):\n    return tuplex[:index] + (value,) + tuplex[index+1:]\n"], ["\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(list1, list2, n):\n    \"\"\"\n    Find the specified number of largest products from two given lists.\n    \"\"\"\n    list1.sort(reverse=True)\n    list2.sort(reverse=True)\n    \n    list1_len = len(list1)\n    list2_len = len(list2)\n    \n    if list1_len < n or list2_len < n:\n        return []\n    \n    result = []\n    \n    for i in range(n):\n        result.append(list1[i] * list2[i])\n    \n    return result\n"], ["\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a,b):\n    return a if a>b else b\n"], ["\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n    return tuple(string)\n"], ["\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit.\n    \"\"\"\n    # Find the number of bits in n\n    n_bits = n.bit_length()\n    # Find the right most set bit\n    right_most_set_bit = n - (n & (n - 1))\n    # Find the left most unset bit\n    left_most_unset_bit = right_most_set_bit + 1\n    return left_most_unset_bit\n\n# Test"], ["\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(radius, height):\n    return (1/3)*(3.14)*(radius**2)*height\n"], ["\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(nums):\n    for i in nums:\n        if i > 0:\n            print(i)\n\npos_nos([-1,-2,1,2])\n\n# Output: 1,2\n\n# Question 5:\n# Write a python function to find the maximum number in a list.\ndef max_num(nums):\n    max_num = nums[0]\n    for i in nums:\n        if i > max_num:\n            max_num = i\n    return max_num\n"], ["\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    \"\"\"\n    :param grid: 2D list of integers\n    :param n: number of columns\n    :return: maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n\n    \"\"\"\n    if n == 1:\n        return max(grid[0])\n    if n == 2:\n        return max(max(grid[0]), max(grid[1]))\n    \n    # initialize the first two rows\n    dp = [0] * n\n    dp[0] = grid[0][0]\n    dp[1] = max(grid[0][0], grid[1][0])\n    \n    # fill in the rest of the rows\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + grid[i][0])\n        \n    # fill in the rest of the columns\n    for j in range(1, n):\n        dp[j] = max(dp[j-1], dp[j-2] + grid[0][j])\n        \n    # fill in the rest of the cells\n    for i in range(2, n):\n        for j in range(1, n):\n            dp[j] = max(dp[j], dp[j-1] + grid[i][j])\n            \n    return dp[n-1]\n"], ["\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(string):\n    max_len = 0\n    for word in string.split():\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"], ["\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(arr, num):\n    \"\"\"\n    Find the index of the last occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == num:\n            if mid == len(arr) - 1 or arr[mid + 1] != num:\n                return mid\n            else:\n                left = mid + 1\n        elif arr[mid] < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n"], ["\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_decode(encoded):\n    \"\"\"\n    decode the modified run-length encoding\n    \"\"\"\n    decoded = []\n    for i in range(len(encoded)):\n        if type(encoded[i]) == list:\n            decoded.extend(modified_decode(encoded[i]))\n        else:\n            decoded.extend([encoded[i]] * encoded[i])\n    return decoded\n\ndef modified_encode(nums):\n    \"\"\"\n    encode the modified run-length encoding\n    \"\"\"\n    encoded = []\n    i = 0\n    while i < len(nums):\n        count = 1\n        while i + 1 < len(nums) and nums[i] == nums[i+1]:\n            count += 1\n            i += 1\n        encoded.append([count, nums[i]])\n        i += 1\n    return encoded\n\ndef test_modified_encode():\n    assert modified_encode([1,1,2,3,4,4,5,1]) == [[2, 1], 2, 3, [2, 4], 5, 1]\n    assert modified_encode([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"], ["\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(s):\n    max_vol = 0\n    for i in range(1, s//3+1):\n        for j in range(i, (s-i)//2+1):\n            k = s - i - j\n            if i*j*k > max_vol:\n                max_vol = i*j*k\n    return max_vol\n"], ["\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nimport re\n\ndef find_long_word(string):\n    return re.findall(r'\\b\\w{5}\\b', string)\n"], ["\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    \"\"\"\n    Calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n    \"\"\"\n    sum_squared = sum([i**2 for i in range(1,n+1)])\n    sum_squared_of_numbers = sum([i for i in range(1,n+1)])**2\n    return sum_squared_of_numbers - sum_squared\n"], ["\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(n):\n    \"\"\"\n    :param n: str\n    :return: str\n    \"\"\"\n    n = list(n)\n    n.reverse()\n    n = ''.join(n)\n    return n\n"], ["\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(lst):\n    min_value = min(lst)\n    return [i for i, x in enumerate(lst) if x == min_value]\n"], ["\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, n):\n    arr.sort()\n    for i in range(n):\n        if i % 2 == 0:\n            arr[i] = -arr[i]\n    return arr\n"], ["\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(tup):\n    return sum(tup[::2]), sum(tup[1::2])\n"], ["\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(n):\n    \"\"\"\n    :param n: given number\n    :return: minimum number of squares whose sum is equal to n\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 2\n    if n == 4:\n        return 2\n    if n == 5:\n        return 2\n    if n == 6:\n        return 3\n    if n == 7:\n        return 2\n    if n == 8:\n        return 2\n    if n == 9:\n        return 2\n    if n == 10:\n        return 2\n    if n == 11:\n        return 2\n    if n == 12:\n        return 3\n    if n == 13:\n        return 2\n    if n == 14:\n        return 2\n    if n == 15:\n        return 2\n    if n == 16:\n        return 4\n    if n == 17:\n        return 2\n    if n == 18:\n        return 2\n    if n == 19:\n        return 2\n    if n == 20:\n        return 2\n    if n == 21:\n        return 2\n    if n == 22:\n        return 3\n    if n == 23:\n        return 2\n    if n == 24:\n        return 2\n    if n == 25:\n        return 2\n    if n == 26:\n        return 3\n    if n == 27:\n        return 3\n    if n == 28:\n        return 3\n    if n == 29:\n        return 3\n    if n == 30:\n        return 3\n    if n == 31:\n        return 3\n    if n == 32:\n        return 4\n    if n == 33:\n        return 3\n    if n == 34:\n        return 3\n    if n == 35:\n        return 3\n    if n == 36:\n        return 4\n    if n == 37:\n        return 3\n    if n == 38:\n        return 3\n    if n =="], ["\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(strings):\n    \"\"\"\n    :param strings: list of strings\n    :return: word with most number of occurrences in the given strings list\n    \"\"\"\n    words = []\n    for string in strings:\n        words += string.split()\n    return max(set(words), key=words.count)\n"], ["\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    if a==b or b==c or c==a:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(arr, n, k):\n    n = n % len(arr)\n    k = k % len(arr)\n    return arr[k:] + arr[:k]\n"], ["\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(lst):\n    count = 0\n    for i in lst:\n        if i < 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\nimport re\n\ndef find_char(string):\n    return re.findall(r'\\b\\w{3,}\\b', string)\n"], ["\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(n):\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(string):\n    freq = {}\n    for char in string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq\n"], ["\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef Sort(lst):\n    lst.sort(key=lambda x: x[1])\n    return lst\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a,b,c):\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(a,b,d):\n    \"\"\"\n    a,b,d are the first, last and common difference of the arithmetic progression\n    \"\"\"\n    n = (b-a)/d + 1\n    return n*(2*a+(n-1)*d)/2\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month):\n    month_dict = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    return month_dict[month] == 28\n"], ["\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text):\n    \"\"\"\n    Returns a tuple of the matched word and the rest of the text.\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n# Test the function"], ["\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if string[i] == string[j-1]:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(a,b):\n    max_divisor = 1\n    for i in range(a,b+1):\n        if b%i == 0:\n            max_divisor = i\n    return max_divisor\n"], ["\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(nums):\n    nums.sort()\n    return sum(nums[:3])\n"], ["\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\ndef set_to_tuple(s):\n    return tuple(s)\n"], ["\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arrays):\n    # Sort the arrays\n    arrays = [sorted(array) for array in arrays]\n    \n    # Initialize the minimum range\n    min_range = (float('inf'), float('inf'))\n    \n    # Iterate over the arrays\n    for i in range(len(arrays)):\n        for j in range(i+1, len(arrays)):\n            # Find the range that includes at least one element from each array\n            range_start = max(arrays[i][0], arrays[j][0])\n            range_end = min(arrays[i][-1], arrays[j][-1])\n            \n            # Update the minimum range\n            min_range = min(min_range, (range_start, range_end))\n    \n    return min_range\n"], ["\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(s):\n    digits = 0\n    letters = 0\n    for i in s:\n        if i.isdigit():\n            digits += 1\n        elif i.isalpha():\n            letters += 1\n    return (digits, letters)\n"], ["\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if i % 2 != 0:\n            for j in range(1, i+1):\n                if i % j == 0:\n                    count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(nums):\n    return [nums[i+1]-nums[i] for i in range(len(nums)-1)]\n"], ["\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if k == 1:\n        return n\n    if k == 2:\n        return n * (n - 1)\n    return zigzag(n - 1, k - 1) + zigzag(n - 2, k - 1)\n"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(length, width):\n    \"\"\"\n    This function takes the length and width of a rectangle and returns the number of squares that can be formed in it.\n    \"\"\"\n    return length * width\n"], ["\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n, k):\n    if n == 0:\n        return 1\n    if k == 0:\n        return 0\n    if k > n:\n        return 0\n    return find_ways(n-k, k) + find_ways(n, k-1)\n"], ["\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(s):\n    for i in s:\n        if i not in \"01\":\n            return \"No\"\n    return \"Yes\"\n"], ["\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(s):\n    # Write your code here\n    # Initialize the minimum length to the length of the string\n    min_length = len(s)\n    # Initialize the set of characters\n    chars = set(s)\n    # Iterate over the set of characters\n    for char in chars:\n        # Remove the character from the string\n        temp = s.replace(char, \"\")\n        # Calculate the length of the string after removing the character\n        temp_length = len(temp)\n        # If the length of the string after removing the character is less than the minimum length, update the minimum length\n        if temp_length < min_length:\n            min_length = temp_length\n    # Return the minimum length\n    return min_length\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(arr, k, n):\n    # Write your code here\n    count = 0\n    for i in range(n):\n        if arr[i] == k:\n            count += 1\n            if count == k:\n                return arr[i]\n    return -1\n\n# Test cases"], ["\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(string):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            if string[i] == string[j]:\n                return False\n    return True\n"], ["\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(nested_list, column):\n    return [row[:column] + row[column+1:] for row in nested_list]\n"], ["\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(a,b,n):\n    \"\"\"\n    a,b: first two terms of arithemetic progression\n    n: term number\n    \"\"\"\n    return a+(n-1)*(b-a)\n"], ["\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n    \"\"\"\n    :param r: radius of circle\n    :return: number of rectangles in circle\n    \"\"\"\n    return int(r * (r + 1) * (2 * r + 1) / 6)\n"], ["\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(angle1, angle2):\n    \"\"\"\n    Find the third angle of a triangle using two angles.\n    \"\"\"\n    return 180 - angle1 - angle2\n"], ["\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(records):\n    max_val = records[0][1]\n    for record in records:\n        if record[1] > max_val:\n            max_val = record[1]\n    return max_val\n"], ["\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(l1,l2):\n    return list(map(lambda x,y: x%y,l1,l2))\n"], ["\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    if a==0:\n        return \"No\"\n    else:\n        x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n        x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n        if x1 == 2*x2:\n            return \"Yes\"\n        else:\n            return \"No\"\n\n# Test Cases"], ["\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    \"\"\"\n    :param n: the nth carol number\n    :return: the nth carol number\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 7\n    else:\n        return get_carol(n-1) + get_carol(n-2)\n"], ["\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(lst):\n    return [i for i in lst if i]\n"], ["\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(lst):\n    \"\"\"\n    Function to find the item with maximum occurrences in a given list.\n    \"\"\"\n    max_item = None\n    max_count = 0\n    for item in lst:\n        count = lst.count(item)\n        if count > max_count:\n            max_item = item\n            max_count = count\n    return max_item\n"], ["\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(tup, k):\n    return [(i+k, j+k, k+k) for i, j, k in tup]\n"], ["\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    flips = 0\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            flips += 1\n    return flips\n"], ["\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(n):\n    count = 0\n    while n != 0:\n        n = n // 10\n        count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(arr):\n    max_product = 0\n    for i in range(len(arr)-1):\n        product = arr[i] * arr[i+1]\n        if product > max_product:\n            max_product = product\n    return max_product\n"], ["\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\n# Solution:\n# We can use recursion to check if the left and right subtrees are balanced.\n# If both subtrees are balanced and the difference in height is at most 1, then the tree is balanced.\n\ndef is_tree_balanced(root):\n    if root is None:\n        return True\n    left_height = get_height(root.left)\n    right_height = get_height(root.right)\n    if abs(left_height - right_height) > 1:\n        return False\n    return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\ndef get_height(node):\n    if node is None:\n        return 0\n    return max(get_height(node.left), get_height(node.right)) + 1\n\n# Question 2:\n# Write a function to find the maximum depth of a binary tree.\n# assert get_max_depth(root) == 3"], ["\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(tup, n):\n    return tuple(tup for _ in range(n))\n"], ["\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(l,b,h):\n    return 2*l*h + 2*b*h\n"], ["\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(tup):\n    return sorted(tup, key=lambda x: float(x[1]))\n"], ["\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(arr, start, end):\n    if start == end:\n        return start + 1\n    mid = (start + end) // 2\n    if arr[mid] == mid:\n        return smallest_missing(arr, start, mid)\n    else:\n        return smallest_missing(arr, mid + 1, end)\n"], ["\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\nimport heapq\n\ndef heap_assending(arr):\n    heapq.heapify(arr)\n    return [heapq.heappop(arr) for i in range(len(arr))]\n"], ["\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(l,w,h):\n    return l*w*h\n"], ["\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(s):\n    if len(s) == 1:\n        return [s]\n    else:\n        perms = []\n        for i in range(len(s)):\n            for perm in permute_string(s[:i] + s[i+1:]):\n                perms.append(s[i] + perm)\n        return perms\n"], ["\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num, multiple):\n    return round(num/multiple)*multiple\n"], ["\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(tup):\n    \"\"\"\n    Remove all the elements that occur more than once and replace the duplicates with some custom value.\n    \"\"\"\n    # Your code here\n    \n    return tup\n\n# Test"], ["\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(string, char):\n    return string.replace(char, '')\n"], ["\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(lst):\n    return [lst[-1]] + lst[:-1]\n"], ["\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(l,w,h):\n    return 2*(l*w + w*h + h*l)\n"], ["\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(row, col):\n    multi_list = []\n    for i in range(row):\n        temp_list = []\n        for j in range(col):\n            temp_list.append(i*col+j)\n        multi_list.append(temp_list)\n    return multi_list\n"], ["\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])\n"], ["\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(arr):\n    \"\"\"\n    Find the number of rotations in a circularly sorted array.\n    \"\"\"\n    # Find the index of the minimum element\n    min_index = arr.index(min(arr))\n    # Find the index of the maximum element\n    max_index = arr.index(max(arr))\n    # If the minimum and maximum indices are the same, then the array is already sorted\n    if min_index == max_index:\n        return 0\n    # Otherwise, find the number of rotations by subtracting the minimum index from the maximum index\n    else:\n        return max_index - min_index\n\n# Test the function"], ["\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(n):\n    \"\"\"\n    Toggle all even bits of a given number.\n    \"\"\"\n    return n ^ 0b1010101010101010\n"], ["\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(n, arr):\n    smallest = min(arr)\n    count = 0\n    for i in arr:\n        if i == smallest:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-1) + get_perrin(n-2) + get_perrin(n-3)\n"], ["\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(s):\n    stack = []\n    swap_count = 0\n    for i in range(len(s)):\n        if s[i] == \"[\":\n            stack.append(i)\n        elif s[i] == \"]\":\n            if len(stack) == 0:\n                swap_count += 1\n            else:\n                stack.pop()\n    swap_count += len(stack)\n    return swap_count\n"], ["\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(hex_num):\n    if hex_num[-1] in ['0', '2', '4', '6', '8']:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"], ["\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    power = 0\n    while 2**power <= n:\n        power += 1\n    return 2**(power-1)\n"], ["\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"], ["\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(lst, s):\n    return [s+str(i) for i in lst]\n"], ["\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(list1, list2, list3):\n    dictionary = {}\n    for i in range(len(list1)):\n        dictionary[list1[i]] = {list2[i]: list3[i]}\n    return dictionary\n"], ["\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 16\n    elif n == 7:\n        return 22\n    elif n == 8:\n        return 29\n    elif n == 9:\n        return 37\n    elif n == 10:\n        return 46\n    elif n == 11:\n        return 55\n    elif n == 12:\n        return 64\n    elif n == 13:\n        return 73\n    elif n == 14:\n        return 82\n    elif n == 15:\n        return 91\n    elif n == 16:\n        return 106\n    elif n == 17:\n        return 118\n    elif n == 18:\n        return 136\n    elif n == 19:\n        return 153\n    elif n == 20:\n        return 173\n    elif n == 21:\n        return 190\n    elif n == 22:\n        return 211\n    elif n == 23:\n        return 226\n    elif n == 24:\n        return 247\n    elif n == 25:\n        return 262\n    elif n == 26:\n        return 277\n    elif n == 27:\n        return 301\n    elif n == 28:\n        return 325\n    elif n == 29:\n        return 351\n    elif n == 30:\n        return 376\n    elif n == 31:\n        return 406\n    elif n == 32:\n        return 433\n    elif n == 33:\n        return 461\n    elif n == 34:\n        return 496\n    elif n == 35:\n        return 528\n    elif n == 36:\n        return 5"], ["\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length_list(lst):\n    return max(lst, key=lambda x: len(x))\n"], ["\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tup):\n    return len(tup) == len(set(tup))\n"], ["\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    \"\"\"\n    for char in string:\n        if string.count(char) == 1:\n            return char\n    return None\n"], ["\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\nimport re\n\ndef check_char(string):\n    pattern = r\"^(.)(.*)\\1$\"\n    match = re.match(pattern, string)\n    if match:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(a,b,c):\n    \"\"\"\n    This function takes three numbers and returns the median of them.\n    \"\"\"\n    numbers = [a,b,c]\n    numbers.sort()\n    if len(numbers)%2 == 0:\n        median = (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1])/2\n    else:\n        median = numbers[len(numbers)//2]\n    return median\n"], ["\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(nums):\n    return sum([sum(int(i) for i in str(num)) for num in nums])\n"], ["\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(t1, t2):\n    return tuple(x ^ y for x, y in zip(t1, t2))\n"], ["\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(lst):\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"], ["\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(t1, t2):\n    \"\"\"\n    This function takes two nested tuples as input and returns a new nested tuple with the element-wise sum of the input tuples.\n    \"\"\"\n    return tuple(tuple(x+y for x,y in zip(t1_row, t2_row)) for t1_row, t2_row in zip(t1, t2))\n\n# Test the function"], ["\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\ndef ncr_modp(n,r,p):\n    \"\"\"\n    Compute nCr mod p\n    \"\"\"\n    if r>n:\n        return 0\n    if r==0:\n        return 1\n    if r==n:\n        return n\n    if n==r:\n        return 1\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    if n==3:\n        return 2\n    if n==4:\n        return 6\n    if n==5:\n        return 10\n    if n==6:\n        return 15\n    if n==7:\n        return 21\n    if n==8:\n        return 28\n    if n==9:\n        return 36\n    if n==10:\n        return 45\n    if n==11:\n        return 55\n    if n==12:\n        return 66\n    if n==13:\n        return 78\n    if n==14:\n        return 90\n    if n==15:\n        return 105\n    if n==16:\n        return 120\n    if n==17:\n        return 135\n    if n==18:\n        return 150\n    if n==19:\n        return 165\n    if n==20:\n        return 180\n    if n==21:\n        return 195\n    if n==22:\n        return 210\n    if n==23:\n        return 225\n    if n==24:\n        return 240\n    if n==25:\n        return 255\n    if n==26:\n        return 270\n    if n==27:\n        return 285\n    if n==28:\n        return 300\n    if n==29:\n        return 315\n    if n==30:\n        return 330\n    if n==31:\n        return 345\n    if n==32:\n        return 360\n    if n==33:\n        return 375\n    if n==34:\n        return 390\n    if n==35:\n        return 405\n    if n==36:\n        return 420\n    if n==37:\n        return"], ["\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\nimport re\n\ndef is_valid_URL(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None\n"], ["\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(a, b):\n    return a if a < b else b\n"], ["\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tuplex, element):\n    for i in tuplex:\n        if i == element:\n            return True\n    return False\n"], ["\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n"], ["\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(n):\n    \"\"\"\n    Rearrange the digits of a number to create the next bigger number.\n    \"\"\"\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    # Find the index of the largest digit\n    max_index = digits.index(max(digits))\n    # Find the largest digit to the right of the largest digit\n    max_right = max(digits[max_index+1:])\n    # Find the smallest digit to the right of the largest digit\n    min_right = min(digits[max_index+1:])\n    # Swap the largest digit with the smallest digit to the right of it\n    digits[max_index], digits[digits.index(min_right)] = digits[digits.index(min_right)], digits[max_index]\n    # Reverse the digits to the right of the largest digit\n    digits[max_index+1:] = reversed(digits[max_index+1:])\n    # Convert the list of digits back to a number\n    return int(''.join(digits))\n"], ["\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(arr1, arr2, k):\n    arr1.sort()\n    arr2.sort()\n    pairs = []\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] + arr2[j] < arr1[i+1] + arr2[j+1]:\n            pairs.append([arr1[i], arr2[j]])\n            i += 1\n        else:\n            j += 1\n    return pairs[:k]\n"], ["\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(tuples):\n    min_product = float('inf')\n    for tup in tuples:\n        min_product = min(min_product, tup[0]*tup[1])\n    return min_product\n"], ["\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(lst):\n    min_val = lst[0]\n    for i in lst:\n        if i < min_val:\n            min_val = i\n    return min_val\n"], ["\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\nimport re\n\ndef snake_to_camel(s):\n    return re.sub(r'_([a-z])', lambda m: m.group(1).upper(), s)\n"], ["\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(lst):\n    return [x for x in lst if x%2==0]\n"], ["\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(lst, n):\n    return [i[n] for i in lst]\n"], ["\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(seq1, seq2):\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False\n"], ["\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(arr):\n    max_product = 0\n    max_pair = None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair\n"], ["\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        "], ["\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(tuples):\n    result = []\n    for t in tuples:\n        if result and result[-1][0] == t[0]:\n            result[-1] = result[-1] + t\n        else:\n            result.append(t)\n    return result\n"], ["\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(lst):\n    max_len = 0\n    max_sublist = []\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_sublist = i\n    return max_sublist\n"], ["\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(numbers):\n    total = 0\n    for number in numbers:\n        total += round(number)\n    return total * len(numbers)\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    sum = 0\n    for i in range(2, n*2+1, 2):\n        sum += i**3\n    return sum\n"], ["\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tup):\n    return \"-\".join(tup)\n"], ["\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n"], ["\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\ndef get_maxgold(mine, rows, cols):\n    # Write your code here\n    if rows == 0 or cols == 0:\n        return 0\n    if mine[rows-1][cols-1] == 0:\n        return get_maxgold(mine, rows-1, cols)\n    return mine[rows-1][cols-1] + max(get_maxgold(mine, rows-1, cols), get_maxgold(mine, rows, cols-1))\n"], ["\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(tup):\n    return [i[-1] for i in tup]\n"], ["\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x: x%2!=0, numbers))\n"], ["\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\nimport re\n\ndef change_date_format(date):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n    \"\"\"\n    return re.sub(r\"(\\d{4})-(\\d{2})-(\\d{2})\", r\"\\3-\\2-\\1\", date)\n"], ["\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n"], ["\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(t1, t2):\n    \"\"\"\n    >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n    (0, 0, 2, 1)\n    \"\"\"\n    return tuple(map(lambda x, y: x & y, t1, t2))\n"], ["\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a,b,c):\n    \"\"\"\n    a: coefficient of x^2\n    b: coefficient of x\n    c: constant term\n    \"\"\"\n    return -(b**2)/(4*a) - c\n"], ["\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a,b,c):\n    \"\"\"\n    a,b,c are the lengths of the sides of a trapezium\n    \"\"\"\n    return (a+b+c)/2\n"], ["\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(arr, num):\n    for i in arr:\n        if num <= i:\n            return 'No, entered number is less than those in the array'\n    return 'Yes, entered number is greater than those in the array'\n"], ["\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(text):\n    \"\"\"\n    Returns a tuple of the matched string and the string that was not matched.\n    \"\"\"\n    if text.startswith(\"a\") and text.endswith(\"b\"):\n        return text, \"Not matched!\"\n    else:\n        return \"Not matched!\", text\n"], ["\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(num):\n    return num % 10\n"], ["\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(lst):\n    for i in lst:\n        if i < 0:\n            print(i)\n\nneg_nos([-1,4,5,-6])\n"], ["\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(string):\n    return ''.join([char for i, char in enumerate(string) if i % 2 == 0])\n"], ["\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(lst):\n    \"\"\"\n    :type lst: List[Tuple[int, int]]\n    :rtype: str\n    \"\"\"\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i][0] == lst[j][1] and lst[i][1] == lst[j][0]:\n                count += 1\n    return str(count)\n"], ["\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    return int(''.join(map(str, nums)))\n"], ["\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    adverbs = []\n    for i in range(len(sentence)):\n        if sentence[i] == '!':\n            adverbs.append((i, i+1, sentence[i+1]))\n    return adverbs\n"], ["\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(side):\n    return 6 * side ** 2\n"], ["\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(arr):\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count/len(arr)\n"], ["\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(lst):\n    max_neg = float('-inf')\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg\n"], ["\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tuple_list, k):\n    return [tuple(i[k:]) for i in tuple_list]\n"], ["\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(t1, t2):\n    \"\"\"\n    t1: tuple of tuples\n    t2: tuple of tuples\n    returns: tuple of tuples\n    \"\"\"\n    return tuple(tuple(x*y for x,y in zip(t1[i], t2[i])) for i in range(len(t1)))\n"], ["\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(tup, lst):\n    count = 0\n    for i in lst:\n        count += tup.count(i)\n    return count\n"], ["\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ncube_nums = lambda lst: [x**3 for x in lst]"], ["\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    \"\"\"\n    Calculate the sum of perrin numbers.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n - 1)\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(a,b,c):\n    if a+b>c and a+c>b and b+c>a:\n        return 'Yes'\n    else:\n        return 'No'\n"], ["\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(lst, size):\n    return [i for i in lst if len(i) == size]\n"], ["\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\nimport re\n\ndef remove_whitespaces(string):\n    return re.sub(r'\\s+', '', string)\n"], ["\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(amount,price):\n    if amount>price:\n        return amount-price\n    else:\n        return None\n"], ["\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n"], ["\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n    \"\"\"\n    Returns a string with the word 'z' in it.\n    \"\"\"\n    if 'z' in text:\n        return 'Found a match!'\n    else:\n        return 'No match!'\n"], ["\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(month_number):\n    if month_number in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(string_list):\n    return [string[::-1] for string in string_list]\n"], ["\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(lst):\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n"], ["\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(length, width):\n    return length * width\n"], ["\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\nimport re\n\ndef remove_uppercase(string):\n    return re.sub(r'[A-Z]+', '', string)\n"], ["\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(lst):\n    return [sublist[0] for sublist in lst]\n"], ["\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(lst):\n    res = [[]]\n    for i in lst:\n        res += [x+[i] for x in res]\n    return res\n"], ["\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        temp = max_product\n        max_product = max(arr[i], max_product * arr[i], min_product * arr[i])\n        min_product = min(arr[i], temp * arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result\n"], ["\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(dictionary,value):\n    for key in dictionary:\n        if dictionary[key]!=value:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(d):\n    return {k:v for k,v in d.items() if v is not None}\n"], ["\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(arr, n):\n    # Base case\n    if n == 1:\n        return 0\n    # If the first element is greater than the second\n    if arr[0] > arr[1]:\n        return 0\n    # If the first element is less than the second\n    if arr[0] < arr[1]:\n        return 1\n    # If the first element is equal to the second\n    if arr[0] == arr[1]:\n        return 0\n    # If the first element is greater than the second\n    if arr[n-1] > arr[n-2]:\n        return n-1\n    # If the first element is less than the second\n    if arr[n-1] < arr[n-2]:\n        return n-2\n    # If the first element is equal to the second\n    if arr[n-1] == arr[n-2]:\n        return 0\n    # If the first element is greater than the second\n    if arr[n-1] > arr[n-3]:\n        return n-1\n    # If the first element is less than the second\n    if arr[n-1] < arr[n-3]:\n        return n-2\n    # If the first element is equal to the second\n    if arr[n-1] == arr[n-3]:\n        return 0\n    # If the first element is greater than the second\n    if arr[n-1] > arr[n-4]:\n        return n-1\n    # If the first element is less than the second\n    if arr[n-1] < arr[n-4]:\n        return n-2\n    # If the first element is equal to the second\n    if arr[n-1] == arr[n-4]:\n        return 0\n    # If the first element is greater than the second\n    if arr[n-1] > arr[n-5]:\n        return n-1\n    # If the first element is less than the second\n    if arr[n-1] < arr[n-5]:"], ["\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(n):\n    octal = 0\n    i = 0\n    while(n != 0):\n        rem = n % 8\n        octal += rem * pow(10, i)\n        n = n // 8\n        i += 1\n    return octal\n"], ["\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, n):\n    # Initialize the maximum product and the current product\n    max_product = 1\n    current_product = 1\n    \n    # Iterate over the array\n    for i in range(n):\n        # If the current number is greater than the previous number, multiply the current product with the current number\n        if arr[i] > arr[i-1]:\n            current_product *= arr[i]\n        # If the current number is less than or equal to the previous number, update the maximum product if the current product is greater\n        else:\n            max_product = max(max_product, current_product)\n            current_product = 1\n    \n    # Return the maximum product\n    return max(max_product, current_product)\n\n# Test the function"], ["\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    \"\"\"\n    :type prices: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if not prices or k == 0:\n        return 0\n    if k >= len(prices) // 2:\n        return sum(prices[i + 1] - prices[i] for i in range(len(prices) - 1))\n    \n    dp = [[0] * (len(prices) + 1) for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        for j in range(1, len(prices) + 1):\n            dp[i][j] = max(dp[i][j - 1], prices[j - 1] - prices[j - 2] + dp[i - 1][j - 2])\n    return dp[k][len(prices)]\n"], ["\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(tup):\n    return tuple(sum(pair) for pair in zip(tup, tup[1:]))\n"], ["\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr, n, m):\n    # Write your code here\n    rem = 0\n    for i in arr:\n        rem = (rem + i) % n\n    return rem\n"], ["\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(lst):\n    for i in range(len(lst)-1):\n        if lst[i+1] - lst[i] != 1:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(tuple_list1, tuple_list2):\n    \"\"\"\n    This function takes two tuple lists as input and returns the intersection of the tuples in the two lists.\n    \"\"\"\n    intersection = set(tuple_list1) & set(tuple_list2)\n    return intersection\n"], ["\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(string, old_char, new_char):\n    return string.replace(old_char, new_char)\n"], ["\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n"], ["\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(arr):\n    return max(arr) + min(arr)\n"], ["\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(string):\n    return string.lower()\n"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(string):\n    return ''.join([i for i in string if i.isupper()])\n"], ["\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(num):\n    if num == 0:\n        return 0\n    else:\n        return int(str(num)[0])\n"], ["\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_char = max(char_count, key=char_count.get)\n    return max_char\n"], ["\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(nums, sum, index=0):\n    if sum == 0:\n        return True\n    if index == len(nums):\n        return False\n    if nums[index] > sum:\n        return is_subset_sum(nums, sum, index + 1)\n    return is_subset_sum(nums, sum, index + 1) or is_subset_sum(nums, sum - nums[index], index + 1)\n"], ["\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\nimport re\n\ndef match(string):\n    pattern = re.compile(r'[A-Z][a-z]+')\n    return pattern.search(string)\n"], ["\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    i = 1\n    while True:\n        if i!=1 and i!=0:\n            if i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!=1 and i!=0 and i!"], ["\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(tuple1, tuple2):\n    return [t for t in tuple1 if t not in tuple2]\n"], ["\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr, n):\n    # Initialize the largest palindrome to -1\n    largest_palindrome = -1\n    # Iterate over the array\n    for i in range(n):\n        for j in range(i, n):\n            # Check if the current number is a palindrome\n            if is_palindrome(arr[i] * arr[j]):\n                # If it is, update the largest palindrome\n                largest_palindrome = max(largest_palindrome, arr[i] * arr[j])\n    return largest_palindrome\n\ndef is_palindrome(num):\n    # Convert the number to a string\n    num_str = str(num)\n    # Check if the string is equal to its reverse\n    return num_str == num_str[::-1]\n"], ["\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Compute binomial probability for the given number.\n    \"\"\"\n    return math.comb(n, k) * p**k * (1-p)**(n-k)\n"], ["\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n"], ["\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(side):\n    return 0.25*5*side**2*(1+5**0.5)\n"], ["\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(n, arr):\n    max_val = max(arr)\n    return arr.count(max_val)\n"], ["\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(tuple_list):\n    symmetric_pairs = set()\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            if tuple_list[i][0] == tuple_list[j][1] and tuple_list[i][1] == tuple_list[j][0]:\n                symmetric_pairs.add(tuple_list[i])\n                symmetric_pairs.add(tuple_list[j])\n    return symmetric_pairs\n"], ["\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a,n,r):\n    \"\"\"\n    a: first term\n    n: number of terms\n    r: common ratio\n    \"\"\"\n    return a*(1-r**n)/(1-r)\n"], ["\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n    while low <= high:\n        mid = (high + low) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    return -1\n"], ["\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n"], ["\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(binary_tuple):\n    binary_string = ''.join(str(bit) for bit in binary_tuple)\n    return int(binary_string, 2)\n"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\nimport re\n\ndef remove_lowercase(string):\n    return re.sub(r'[a-z]+', '', string)\n"], ["\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\nimport heapq\n\ndef heap_queue_smallest(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return heap\n"], ["\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(r,h):\n    \"\"\"\n    Calculates the surface area of a cone.\n    \"\"\"\n    return (r**2 + r*h + h**2) * 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n"], ["\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n"], ["\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(radius):\n    return 2 * radius\n"], ["\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(lst):\n    return ' '.join(lst)\n"], ["\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(a,b):\n    if a > b:\n        a,b = b,a\n    for i in range(1,a+1):\n        if a%i == 0 and b%i == 0:\n            return i\n    return 1\n"], ["\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(a,b):\n    return a%b\n"], ["\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(nums):\n    result = []\n    for i in range(len(nums)-1):\n        result.append(nums[i]+nums[i+1])\n    return result\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    \"\"\"\n    This function returns the sum of cubes of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n"], ["\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    zero_index = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[i], arr[zero_index] = arr[zero_index], arr[i]\n            zero_index += 1\n    return arr\n"], ["\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef permutation_coefficient(n, k):\n    return factorial(n) / factorial(n-k)\n"], ["\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words, words_to_remove):\n    return [word for word in words if word not in words_to_remove]\n"], ["\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(list1,list2):\n    if len(list1)==0 or len(list2)==0:\n        return False\n    if len(list1)!=len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i]!=list2[i]:\n            return False\n    return True\n"], ["\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(n):\n    sum = 0\n    count = 0\n    for i in range(1, n+1, 2):\n        sum += i\n        count += 1\n    return sum/count\n"], ["\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [0] * (k + 1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(k, arr[i] - 1, -1):\n            dp[j] += dp[j - arr[i]]\n    return dp[k]\n"]]