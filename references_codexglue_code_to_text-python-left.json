["str - > list Convert XML to URL List. From Biligrab.", "Downloads Dailymotion videos by URL.", "Downloads Sina videos by URL.", "Format text with color or other effects into ANSI escaped string.", "Print a log message to standard error.", "Print an error log message.", "What a Terrible Failure!", "Detect operating system.", "str - > None", "str - > dict Information for CKPlayer API content.", "Splicing URLs according to video ID to get video details", "str - > list of str Give you the real URLs.", "Converts a string to a valid filename.", "Downloads CBS videos by URL.", "Override the original one Ugly ugly dirty hack", "str str str bool bool - > None", "Scans through a string for substrings matched some patterns.", "Parses the query string of a URL and returns the value of a parameter.", "Gets the content of a URL via sending a HTTP GET request.", "Post the content of a URL via sending a HTTP POST request.", "Parses host name and port number from a string.", "str - > str", "JSON int int int - > str Get a proper title with courseid + topicID + partID.", "int - > None Download a WHOLE course. Reuse the API call to save time.", "int int int - > None Download ONE PART of the course.", "Checks if a task is either queued or running in this executor", "Returns and flush the event buffer. In case dag_ids is specified it will only return and flush events for the given dag_ids. Otherwise it returns and flushes all", "Returns a snowflake. connection object", "eturns aws_access_key_id aws_secret_access_key from extra", "Fetches a field from extras and returns it. This is some Airflow magic. The grpc hook type adds custom UI elements to the hook page which allow admins to specify scopes credential pem files etc. They get formatted as shown below.", "Executes SQL using psycopg2 copy_expert method. Necessary to execute COPY command without access to a superuser.", "Dumps a database table into a tab - delimited file", "Uploads the file to Google cloud storage", "Gets the max partition for a table.", "Returns a mysql connection object", "Returns the state of a TaskInstance at the command line. >>> airflow task_state tutorial sleep 2015 - 01 - 01 success", "Runs forever monitoring the child processes of", "Retrieves connection to Cloud Translate", "Translate a string or list of strings.", "Retrieves a resource containing information about a Cloud SQL instance.", "Creates a new Cloud SQL instance.", "Updates settings of a Cloud SQL instance.", "Deletes a Cloud SQL instance.", "Retrieves a database resource from a Cloud SQL instance.", "Creates a new database inside a Cloud SQL instance.", "Updates a database resource inside a Cloud SQL instance.", "Deletes a database from a Cloud SQL instance.", "Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL dump or CSV file.", "Starts Cloud SQL Proxy.", "Stops running proxy.", "Returns version of the Cloud SQL Proxy.", "Create connection in the Connection table according to whether it uses proxy TCP UNIX sockets SSL. Connection ID will be randomly generated.", "Retrieves the dynamically created connection from the Connection table.", "Delete the dynamically created connection from the Connection table.", "Retrieve Cloud SQL Proxy runner. It is used to manage the proxy lifecycle per task.", "Retrieve database hook. This is the actual Postgres or MySQL database hook that uses proxy or connects directly to the Google Cloud SQL database.", "Clean up database hook after it was used.", "Reserve free TCP port to be used by Cloud SQL Proxy", "Replaces invalid MLEngine job_id characters with _.", "Extract error code from ftp exception", "Remove any existing DAG runs for the perf test DAGs.", "Remove any existing task instances for the perf test DAGs.", "Toggle the pause state of the DAGs in the test.", "Print operational metrics for the scheduler test.", "Override the scheduler heartbeat to determine when the test is complete", "Invoke Lambda Function", "Creates Operators needed for model evaluation and returns.", "Creates the directory specified by path creating intermediate directories as necessary. If directory already exists this is a no - op.", "A small helper function to convert a string to a numeric value if appropriate", "Make a naive datetime. datetime in a given time zone aware.", "Make an aware datetime. datetime naive in a given time zone.", "Wrapper around datetime. datetime that adds settings. TIMEZONE if tzinfo not specified", "Establish a connection to druid broker.", "Returns http session for use with requests", "Performs the request", "Checks the status code and raise an AirflowException exception on non 2XX or 3XX status codes", "Grabs extra options like timeout and actually runs the request checking for the result", "Contextmanager that will create and teardown a session.", "Function decorator that provides a session if it isn t provided. If you want to reuse a session or run the function as part of a database transaction you pass it to the function if not this wrapper will create one and close it for you.", "Clear out the database", "Parses some DatabaseError to provide a better error message", "Get a set of records from Presto", "Get a pandas dataframe from a sql query.", "Execute the statement against Presto. Can be used to create views.", "A generic way to insert a set of tuples into a table.", "Return a cosmos db client.", "Checks if a collection exists in CosmosDB.", "Creates a new collection in the CosmosDB database.", "Checks if a database exists in CosmosDB.", "Creates a new database in CosmosDB.", "Deletes an existing database in CosmosDB.", "Deletes an existing collection in the CosmosDB database.", "Insert a list of new documents into an existing collection in the CosmosDB database.", "Delete an existing document out of a collection in the CosmosDB database.", "Get a document from an existing collection in the CosmosDB database.", "Get a list of documents from an existing collection in the CosmosDB database via SQL query.", "Returns the Cloud Function with the given name.", "Creates a new function in Cloud Function in the location specified in the body.", "Updates Cloud Functions according to the specified update mask.", "Uploads zip file with sources.", "Deletes the specified Cloud Function.", "Wrapper around the private _get_dep_statuses method that contains some global checks for all dependencies.", "Returns whether or not this dependency is met for a given task instance. A dependency is considered met if all of the dependency statuses it reports are passing.", "Returns an iterable of strings that explain why this dependency wasn t met.", "Parses a config file for s3 credentials. Can currently parse boto s3cmd. conf and AWS SDK config formats", "Get the underlying botocore. Credentials object.", "Returns verticaql connection object", "Ensure all logging output has been flushed", "If the path contains a folder with a. zip suffix then the folder is treated as a zip archive and path to zip is returned.", "Traverse a directory and look for Python files.", "Construct a TaskInstance from the database based on the primary key", "Launch DagFileProcessorManager processor and start DAG parsing loop in manager.", "Send termination signal to DAG parsing processor manager and expect it to terminate all DAG file processors.", "Helper method to clean up DAG file processors to avoid leaving orphan processes.", "Use multiple processes to parse and generate tasks for the DAGs in parallel. By processing them in separate processes we can get parallelism and isolation from potentially harmful user code.", "Parse DAG files repeatedly in a standalone loop.", "Parse DAG files in a loop controlled by DagParsingSignal. Actual DAG parsing loop will run once upon receiving one agent heartbeat message and will report done when finished the loop.", "Refresh file paths from dag dir if we haven t done it for too long.", "Occasionally print out stats about how fast the files are getting processed", "Clears import errors for files that no longer exist.", "Print out stats about how files are getting processed.", "Update this with a new set of paths to DAG definition files.", "Sleeps until all the processors are done.", "This should be periodically called by the manager loop. This method will kick off new processes to process DAG definition files and read the results from the finished processors.", "Kill all child processes on exit since we don t want to leave them as orphaned.", "Opens a ssh connection to the remote host.", "Creates a transfer job that runs periodically.", "Gets the latest state of a long - running operation in Google Storage Transfer Service.", "Lists long - running operations in Google Storage Transfer Service that match the specified filter.", "Updates a transfer job that runs periodically.", "Deletes a transfer job. This is a soft delete. After a transfer job is deleted the job and all the transfer executions are subject to garbage collection. Transfer jobs become eligible for garbage collection 30 days after soft delete.", "Cancels an transfer operation in Google Storage Transfer Service.", "Pauses an transfer operation in Google Storage Transfer Service.", "Resumes an transfer operation in Google Storage Transfer Service.", "Waits until the job reaches the expected state.", "Returns all task reschedules for the task instance and try number in ascending order.", "Returns the number of slots open at the moment", "Runs command and returns stdout", "Remove an option if it exists in config from a file or default config. If both of config have the same option this removes the option in both configs unless remove_default = False.", "Returns the section as a dict. Values are converted to int float bool as required.", "Allocate IDs for incomplete keys.", "Begins a new transaction.", "Commit a transaction optionally creating deleting or modifying some entities.", "Lookup some entities by key.", "Roll back a transaction.", "Run a query for entities.", "Gets the latest state of a long - running operation.", "Deletes the long - running operation.", "Poll backup operation state until it s completed.", "Export entities from Cloud Datastore to Cloud Storage for backup.", "Import a backup from Cloud Storage to Cloud Datastore.", "Publish a message to a topic or an endpoint.", "Fetch the hostname using the callable from the config or using socket. getfqdn as a fallback.", "Retrieves connection to Cloud Natural Language service.", "Finds named entities in the text along with entity types salience mentions for each entity and other properties.", "A convenience method that provides all the features that analyzeSentiment analyzeEntities and analyzeSyntax provide in one call.", "Classifies a document into categories.", "Gets template fields for specific operator class.", "A role that allows you to include a list of template fields in the middle of the text. This is especially useful when writing guides describing how to use the operator. The result is a list of fields where each field is shorted in the literal block.", "Properly close pooled database connections", "Ensures that certain subfolders of AIRFLOW_HOME are on the classpath", "Gets the returned Celery result from the Airflow task ID provided to the sensor and returns True if the celery result has been finished execution.", "Return true if the ticket cache contains conf information as is found in ticket caches of Kerberos 1. 8. 1 or later. This is incompatible with the Sun Java Krb5LoginModule in Java6 so we need to take an action to work around it.", "Transforms a SQLAlchemy model instance into a dictionary", "Yield successive chunks of a given size from a list of items", "Reduce the given list of items by splitting it into chunks of the given size and passing each chunk through the reducer", "Given a number of tasks builds a dependency chain.", "Returns a pretty ascii table from tuples", "Given task instance try_number filename_template return the rendered log filename", "Returns a Google Cloud Dataproc service object.", "Awaits for Google Cloud Dataproc Operation to complete.", "Coerces content or all values of content if it is a dict to a string. The function will throw if content contains non - string or non - numeric types.", "Handles the Airflow + Databricks lifecycle logic for a Databricks operator", "Run an pig script using the pig cli", "Fetch and return the state of the given celery task. The scope of this function is global so that it can be called by subprocesses in the pool.", "How many Celery tasks should each worker process send.", "How many Celery tasks should be sent to each worker process.", "Like a Python builtin dict object setdefault returns the current value for a key and if it isn t there stores the default value and returns it.", "Returns a Google MLEngine service object.", "Launches a MLEngine job and wait for it to reach a terminal state.", "Gets a MLEngine job based on the job name.", "Waits for the Job to reach a terminal state.", "Creates the Version on Google Cloud ML Engine.", "Sets a version to be the default. Blocks until finished.", "Lists all available versions of a model. Blocks until finished.", "Deletes the given version of a model. Blocks until finished.", "Create a Model. Blocks until finished.", "Gets a Model. Blocks until finished.", "Write batch items to dynamodb table with provisioned throughout capacity.", "Integrate plugins to the context.", "Creates a new instance of the configured executor if none exists and returns it", "Creates a new instance of the named executor. In case the executor name is not know in airflow look for it in the plugins", "Handles error callbacks when using Segment with segment_debug_mode set to True", "Returns a mssql connection object", "Trigger a new dag run for a Dag with an execution date of now unless specified in the data.", "Delete all DB records related to the specified Dag.", "Returns a JSON with a task s public instance variables.", "Get all pools.", "Create a pool.", "Delete pool.", "Create a new container group", "Get the state and exitcode of a container group", "Get the messages of a container group", "Get the tail from logs of a container group", "Delete a container group", "Test if a container group exists", "Function decorator that Looks for an argument named default_args and fills the unspecified arguments from it.", "Builds an ingest query for an HDFS TSV load.", "Check for message on subscribed channels and write to xcom the message with key message", "Returns a set of dag runs for the given search criteria.", "Returns the task instances for this dag run", "Returns the task instance specified by task_id for this dag run", "The previous DagRun if there is one", "The previous SCHEDULED DagRun if there is one", "Determines the overall state of the DagRun based on the state of its TaskInstances.", "Verifies the DagRun by checking for removed tasks or tasks that are not in the database yet. It will set state to removed or add the task if required.", "We need to get the headers in addition to the body answer to get the location from them This function uses jenkins_request method from python - jenkins library with just the return call changed", "Given a context this function provides a dictionary of values that can be used to externally reconstruct relations between dags dag_runs tasks and task_instances. Default to abc. def. ghi format and can be made to ABC_DEF_GHI format if in_env_var_format is set to True.", "This function decides whether or not to Trigger the remote DAG", "Sends a single datapoint metric to DataDog", "Queries datadog for a specific metric potentially with some function applied to it and returns the results.", "Gets the DAG out of the dictionary and refreshes it if expired", "Fail given zombie tasks which are tasks that haven t had a heartbeat for too long in the current DagBag.", "Adds the DAG into the bag recurses into sub dags. Throws AirflowDagCycleException if a cycle is detected in this dag or its subdags", "Given a file path or a folder this method looks for python modules imports them and adds them to the dagbag collection.", "Prints a report around DagBag loading stats", "Add or subtract days from a YYYY - MM - DD", "Takes an input string and outputs another string as specified in the output format", "poke matching files in a directory with self. regex", "poke for a non empty directory", "Clears a set of task instances but makes sure the running ones get killed.", "Return the try number that this task number will be when it is actually run.", "Generates the shell command required to execute this task instance.", "Get the very latest state from the database if a session is passed we use and looking up the state becomes part of the session otherwise a new session is used.", "Forces the task instance s state to FAILED in the database.", "Refreshes the task instance from the database based on the primary key", "Clears all XCom data from the database for the task instance", "Returns a tuple that identifies the task instance uniquely", "Checks whether the dependents of this task instance have all succeeded. This is meant to be used by wait_for_downstream.", "Get datetime of the next retry if the task instance fails. For exponential backoff retry_delay is used as base and will be converted to seconds.", "Checks on whether the task instance is in the right state and timeframe to be retried.", "Returns a boolean as to whether the slot pool has room for this task to run", "Returns the DagRun for this TaskInstance", "Make an XCom available for tasks to pull.", "Pull XComs that optionally meet certain criteria.", "Sets the log context.", "Close and upload local log file to remote storage Wasb.", "Retrieves connection to Google Compute Engine.", "Starts an existing instance defined by project_id zone and resource_id. Must be called with keyword arguments rather than positional.", "Sets machine type of an instance defined by project_id zone and resource_id. Must be called with keyword arguments rather than positional.", "Retrieves instance template by project_id and resource_id. Must be called with keyword arguments rather than positional.", "Inserts instance template using body specified Must be called with keyword arguments rather than positional.", "Retrieves Instance Group Manager by project_id zone and resource_id. Must be called with keyword arguments rather than positional.", "Patches Instance Group Manager with the specified body. Must be called with keyword arguments rather than positional.", "Waits for the named operation to complete - checks status of the async call.", "Check if bucket_name exists.", "Creates an Amazon S3 bucket.", "Checks that a prefix exists in a bucket", "Lists prefixes in a bucket under prefix", "Lists keys in a bucket under prefix and not containing delimiter", "Checks if a key exists in a bucket", "Returns a boto3. s3. Object", "Reads a key from S3", "Reads a key with S3 Select.", "Checks that a key matching a wildcard expression exists in a bucket", "Returns a boto3. s3. Object object matching the wildcard expression", "Loads a local file to S3", "Loads a string to S3", "Loads bytes to S3", "Loads a file object to S3", "Creates a copy of an object that is already stored in S3.", "Queries cassandra and returns a cursor to the results.", "Converts a user type to RECORD that contains n fields where n is the number of attributes. Each element in the user type class will be converted to its corresponding data type in BQ.", "Send an email with html content using sendgrid.", "Retrieves connection to Cloud Speech.", "Recognizes audio input", "Call the SparkSqlHook to run the provided sql query", "Load AirflowPlugin subclasses from the entrypoints provided. The entry_point group should be airflow. plugins.", "Check whether a potential object is a subclass of the AirflowPlugin class.", "Sets tasks instances to skipped from the same dag run.", "Return a AzureDLFileSystem object.", "Check if a file exists on Azure Data Lake.", "Upload a file to Azure Data Lake.", "List files in Azure Data Lake Storage", "Run Presto Query on Athena", "Uncompress gz and bz2 files", "Queries MSSQL and returns a cursor of results.", "Decorates function to execute function at the same time submitting action_logging but in CLI context. It will call action logger callbacks twice one for pre - execution and the other one for post - execution.", "Builds metrics dict from function args It assumes that function arguments is from airflow. bin. cli module s function and has Namespace instance where it optionally contains dag_id task_id and execution_date.", "Create the specified cgroup.", "Delete the specified cgroup.", "The purpose of this function is to be robust to improper connections settings provided by users specifically in the host field.", "Utility function to perform an API call with retries", "Sign into Salesforce only if we are not already signed in.", "Make a query to Salesforce.", "Get the description of an object from Salesforce. This description is the object s schema and some extra metadata that Salesforce stores for each object.", "Get a list of all available fields for an object.", "Get all instances of the object from Salesforce. For each model only get the fields specified in fields.", "Convert a column of a dataframe to UNIX timestamps if applicable", "Write query results to file.", "Fetches PyMongo Client", "Fetches a mongo collection object for querying.", "Replaces many documents in a mongo collection.", "Checks the mail folder for mails containing attachments with the given name.", "Retrieves mail s attachments in the mail folder by its name.", "Downloads mail s attachments in the mail folder by its name to the local directory.", "Gets all attachments by name for the mail.", "Gets the file including name and payload.", "Write batch records to Kinesis Firehose", "Determines whether a task is ready to be rescheduled. Only tasks in NONE state with at least one row in task_reschedule table are handled by this dependency class otherwise this dependency is considered as passed. This dependency fails if the latest reschedule request s reschedule date is still in future.", "Send email using backend specified in EMAIL_BACKEND.", "Send an email with html content", "Processes DateTimes from the DB making sure it is always returning UTC. Not using timezone. convert_to_utc as that converts to configured TIMEZONE while the DB might be running with some other setting. We assume UTC datetimes in the database.", "Check if a blob exists on Azure Blob Storage.", "Check if a prefix exists on Azure Blob storage.", "Upload a string to Azure Blob Storage.", "Read a file from Azure Blob Storage and return as a string.", "Delete a file from Azure Blob Storage.", "BACKPORT FROM PYTHON3 FTPLIB.", "Returns a FTP connection object", "Returns a list of files on the remote system.", "Transfers the remote file to a local location.", "Transfers a local file to the remote location.", "Returns a datetime object representing the last time the file was modified", "Call the DiscordWebhookHook to post message", "Return the FileService object.", "Check if a directory exists on Azure File Share.", "Check if a file exists on Azure File Share.", "Return the list of directories and files stored on a Azure File Share.", "Create a new directory on a Azure File Share.", "Upload a file to Azure File Share.", "Upload a string to Azure File Share.", "Upload a stream to Azure File Share.", "Returns a Google Cloud Storage service object.", "Copies an object from a bucket to another with renaming if requested.", "Get a file from Google Cloud Storage.", "Uploads a local file to Google Cloud Storage.", "Checks for the existence of a file in Google Cloud Storage.", "Checks if an blob_name is updated in Google Cloud Storage.", "Deletes an object from the bucket.", "List all objects from the bucket with the give string prefix in name", "Gets the size of a file in Google Cloud Storage.", "Gets the CRC32c checksum of an object in Google Cloud Storage.", "Gets the MD5 hash of an object in Google Cloud Storage.", "Creates a new bucket. Google Cloud Storage uses a flat namespace so you can t create a bucket with a name that is already in use.", "Composes a list of existing object into a new object in the same storage bucket_name", "Returns true if training job s secondary status message has changed.", "Returns a string contains start time and the secondary training job status message.", "Tar the local file or directory and upload to s3", "Extract the S3 operations from the configuration and execute them.", "Check if an S3 URL exists", "Establish an AWS connection for retrieving logs during training", "Create a training job", "Create a tuning job", "Create a transform job", "Create an endpoint", "Return the training job info associated with job_name and print CloudWatch logs", "Check status of a SageMaker job", "Display the logs for a given training job optionally tailing them until the job is complete.", "Execute the python dataflow job.", "Run migrations in offline mode.", "Run migrations in online mode.", "Deletes the specified Cloud Bigtable instance. Raises google. api_core. exceptions. NotFound if the Cloud Bigtable instance does not exist.", "Creates new instance.", "Creates the specified Cloud Bigtable table. Raises google. api_core. exceptions. AlreadyExists if the table exists.", "Deletes the specified table in Cloud Bigtable. Raises google. api_core. exceptions. NotFound if the table does not exist.", "Updates number of nodes in the specified Cloud Bigtable cluster. Raises google. api_core. exceptions. NotFound if the cluster does not exist.", "This function creates the command list from available information", "This function prepares a list of hiveconf params from a dictionary of key value pairs.", "Loads a pandas DataFrame into hive.", "Loads a local file into Hive", "Returns a Hive thrift client.", "Checks whether a partition with a given name exists", "Check if table exists", "Returns a Hive connection object.", "Get results of the provided hql in target schema.", "Execute hql in target schema and write results to a csv file.", "Get a set of records from a Hive query.", "Get a pandas dataframe from a Hive query", "Retrieves connection to Cloud Vision.", "Get Dingding endpoint for sending message.", "Send Dingding message", "Helper method that binds parameters to a SQL query.", "Helper method that escapes parameters to a SQL query.", "Helper method that casts a BigQuery row to the appropriate data types. This is useful because BigQuery returns all fields as strings.", "function to check expected type and raise error if type is not correct", "Returns a BigQuery PEP 249 connection object.", "Returns a BigQuery service object.", "Checks for the existence of a table in Google BigQuery.", "Creates a new empty table in the dataset. To create a view which is defined by a SQL query parse a dictionary to view kwarg", "Patch information in an existing table. It only updates fileds that are provided in the request object.", "Cancel all started queries that have not yet completed", "Delete an existing table from the dataset; If the table does not exist return an error unless ignore_if_missing is set to True.", "creates a new empty table in the dataset; If the table already exists update the existing table. Since BigQuery does not natively allow table upserts this is not an atomic operation.", "Grant authorized view access of a dataset to a view table. If this view has already been granted access to the dataset do nothing. This method is not atomic. Running it may clobber a simultaneous update.", "Method returns dataset_resource if dataset exist and raised 404 error if dataset does not exist", "Method returns full list of BigQuery datasets in the current project", "Method to stream data into BigQuery one record at a time without needing to run a load job", "Executes a BigQuery query and returns the job ID.", "Execute a BigQuery query multiple times with different parameters.", "Helper method for fetchone which returns the next row from a buffer. If the buffer is empty attempts to paginate through the result set for the next page and load it into the buffer.", "Queries Postgres and returns a cursor to the results.", "Create all the intermediate directories in a remote host", "Create queue using connection object", "Send message to the queue", "Run the task command.", "A callback that should be called when this is done running.", "Parse options and process commands", "generate HTML header content", "generate HTML div", "generate javascript code for the chart", "Create X - axis", "Create Y - axis", "Returns a sqlite connection object", "Decorator to log user actions", "Decorator to make a view compressed", "Returns the last dag run for a dag None if there was none. Last dag run can be any type of run eg. scheduled or backfilled. Overridden DagRuns are ignored.", "Creates a dag run from this dag including the tasks associated with this dag. Returns the dag run.", "Publish the message to SQS queue", "eturns a json response from a json serializable python object", "Opens the given file. If the path contains a folder with a. zip suffix then the folder is treated as a zip archive opening the file inside the archive.", "Used by cache to get a unique key per URL", "Returns Gcp Video Intelligence Service client", "Performs video annotation.", "Get Opsgenie api_key for creating alert", "Overwrite HttpHook get_conn because this hook just needs base_url and headers and does not need generic params", "Execute the Opsgenie Alert call", "Construct the Opsgenie JSON payload. All relevant parameters are combined here to a valid Opsgenie JSON payload.", "Call the OpsgenieAlertHook to post message", "check if aws conn exists already or create one and return it", "Run Presto query on athena with provided config and return submitted query_execution_id", "Fetch the status of submitted athena query. Returns None or one of valid query states.", "Poll the status of submitted athena query until query state reaches final state. Returns one of the final states", "Returns an SFTP connection object", "Sleep for the time specified in the exception. If not specified wait for 60 seconds.", "Call Zendesk API and return results", "Retrieves the partition values for a table.", "Get the information of the table", "Get the physical location of the table", "Return status of a cluster", "Delete a cluster and optionally create a snapshot", "Gets a list of snapshots for a cluster", "Restores a cluster from its snapshot", "Creates a snapshot of a cluster", "SlackAPIOperator calls will not fail even if the call is not unsuccessful. It should not prevent a DAG from completing in success", "Creates a job flow using the config from the EMR connection. Keys of the json extra hash may have the arguments of the boto3 run_job_flow method. Overrides for this config may be passed as the job_flow_overrides.", "Will test the filepath result and test if its size is at least self. filesize", "Will filter if instructed to do so the result to remove matching criteria", "Executed by task_instance at runtime", "Get pool by a given name.", "Create a pool with a given parameters.", "Delete pool by a given name.", "Converts a python dictionary to the proto supplied", "Given an operation continuously fetches the status from Google Cloud until either completion or an error occurring", "Fetches the operation from Google Cloud", "Append labels to provided Cluster Protobuf", "Creates a cluster consisting of the specified number and type of Google Compute Engine instances.", "Gets details of specified cluster", "Given a Discord http_conn_id return the default webhook endpoint or override if a webhook_endpoint is manually supplied.", "Construct the Discord JSON payload. All relevant parameters are combined here to a valid Discord JSON payload.", "Execute the Discord webhook call", "Encrypts a plaintext message using Google Cloud KMS.", "Imports table from remote location to target dir. Arguments are copies of direct sqoop command line arguments", "Imports a specific query from the rdbms to hdfs", "Exports Hive table to remote location. Arguments are copies of direct sqoop command line Arguments", "Retrieves connection to Cloud Text to Speech.", "Synthesizes text input", "Close and upload local log file to remote storage S3.", "When using git to retrieve the DAGs use the GitSync Init Container", "Defines any necessary environment variables for the pod executor", "Defines any necessary secrets for the pod executor", "Defines the security context", "Get link to qubole command result page.", "Heartbeats update the job s entry in the database with a timestamp for the latest_heartbeat and allows for the job to be killed externally. This allows at the system level to monitor what is actually active.", "Launch a process to process the given file.", "Launch the process and start processing the DAG.", "Check if the process launched to process this file is done.", "Helper method to clean up processor_agent to avoid leaving orphan processes.", "For the DAGs in the given DagBag record any associated import errors and clears errors for files that no longer have them. These are usually displayed through the Airflow UI so that users know that there are issues parsing DAGs.", "This method schedules the tasks for a single DAG by looking at the active DAG runs and adding task instances that should run to the queue.", "For all DAG IDs in the SimpleDagBag look for task instances in the old_states and set them to new_state if the corresponding DagRun does not exist or exists but is not in the running state. This normally should not happen but it can if the state of DagRuns are changed manually.", "Get the concurrency maps.", "Changes the state of task instances in the list with one of the given states to QUEUED atomically and returns the TIs changed in SimpleTaskInstance format.", "Takes task_instances which should have been set to queued and enqueues them with the executor.", "Attempts to execute TaskInstances that should be executed by the scheduler.", "If there are tasks left over in the executor we set them back to SCHEDULED to avoid creating hanging tasks.", "Respond to executor events.", "Process a Python file containing Airflow DAGs.", "Updates the counters per state of the tasks that were running. Can re - add to tasks to run in case required.", "Checks if the executor agrees with the state of task instances that are running", "Returns a dag run for the given run date which will be matched to an existing dag run if available or create a new dag run otherwise. If the max_active_runs limit is reached this function will return None.", "Returns a map of task instance key to task instance object for the tasks to run in the given dag run.", "Computes the dag runs and their respective task instances for the given run dates and executes the task instances. Returns a list of execution dates of the dag runs that were executed.", "Go through the dag_runs and update the state based on the task_instance state. Then set DAG runs that are not finished to failed.", "Initializes all components required to run a dag for a specified date range and calls helper method to execute the tasks.", "Self destruct task if state has been moved away from running externally", "Provides a client for interacting with the Cloud Spanner API.", "Gets information about a particular instance.", "Invokes a method on a given instance by applying a specified Callable.", "Creates a new Cloud Spanner instance."]