[["import signal"], ["b'\\x04\\x04\\x04\\x04\\x04\\x04\\x04\\x04'.decode('utf-8')"], ["all(x == myList[0] for x in myList)"], ["'Python: Very Good'"], ["str.encode('cp1251', 'ignore').decode('utf-8')"], ["kwargs = {k: v for k, v in kwargs.items() if v is not None}"], ["kwargs = {k: v for k, v in kwargs.items() if v is not None}"], ["output = subprocess.check_output(['ps', '-ef', '|', 'grep', 'something', '|', 'wc', '-l'])"], ["''.join(['a', 'b', 'c'])"], ["s1.intersection(s2)"], ["headers = {'Content-Type': 'application/json'}"], ["when.strftime('%m/%d/%Y')"], ["inputString.split('\\n')"], ["a = 'a \\n b \\r\\n c'"], ["b = [1, 2, 3, 4, 5]"], ["Entry.objects.first()"], ["np.sum(arr, axis=1)"], ["import warnings"], ["''.join(l) + ' '"], ["python hello.py htmlfilename.htm"], ["datetime.datetime.strptime(str, '%H:%M:%S.%f')"], ["my_float = float(my_string.replace(',', '.'))"], ["float(str.replace(',', '.'))"], ["import sys"], ["re.split('(\\\\W+)', 'Words, words, words.')"], ["f = open('Output.txt', 'a')"], ["import urllib.request"], ["import requests"], ["urllib.request.urlretrieve('http://www.example.com/', 'example.txt')"], ["urllib.request.urlretrieve(url, filename)"], ["import requests"], ["parser.add_argument('--version', action='version', version='%(prog)s 2.0')"], ["del d['c']"], ["merged_df = pd.merge(split_df['key'], csv_df['key'], on='key', suffixes=('_left', '_right'))"], ["s.split(' ')[:4]"], ["x = input()"], ["app.config['DEBUG'] = True"], ["with open('save.txt', 'w') as f:"], ["np.tensordot(P, T, axes=([1,2],[0,1]))"], ["import numpy as np"], ["content = content.rsplit(' ', 1)[0]"], ["np.array([x])"], ["sum(sum(L, []))"], ["float.fromhex('470FC614')"], ["my_dict = {key: value*2 for key, value in my_dict.items()}"], ["python3 -m timeit -s \"import os; os.system('sleep.sh')\""], ["','.join(l)"], ["','.join(myList)"], ["x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], ["s = 'lamp, bag, mirror'"], ["''.join(reversed(s.split('.')))"], ["datetime.datetime.fromtimestamp(s/1000).strftime('%Y-%m-%d %H:%M:%S.%f')"], ["datetime.datetime.fromtimestamp(1236472051807).strftime('%Y-%m-%d %H:%M:%S')"], ["from datetime import datetime, timedelta"], ["sum(row[column] for row in data)"], ["sum(array, axis=0)"], ["base64.b64encode(your_string.encode())"], ["dict(zip(dicts[0].keys(), zip(*dicts)))"], ["def merge_dicts(dicts, k):"], ["url_params = request.args.get('param')"], ["duplicates = [x for x in mylist if mylist.count(x) > 1]"], ["import os"], ["sys.path.append('/path/to/subdir')"], ["cursor.execute(\"INSERT INTO table_name (column_name) VALUES (None)\")"], ["list_of_menuitems = [list_of_menuitems]"], ["a.extend(b)"], ["list.extend(set)"], ["df.to_csv('np.txt', index=False)"], ["df.to_csv('c:\\\\data\\\\pandas.txt', index=False)"], ["x.rsplit('-', 1)"], ["s.rsplit('-', 1)[-1]"], ["ftp.storbinary('STOR filename', open(filename, 'rb'))"], ["driver.execute_script(\"document.getElementById('XYZ').innerHTML = document.getElementById('XYZ').innerHTML + 1\")"], ["max_array = [max(x, y) for x, y in zip([2, 3, 4], [1, 5, 2])]"], ["l[3:] + l[:3]"], ["for file in os.listdir('.'):"], ["for file in os.listdir('source'):"], ["import random"], ["datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')"], ["gql = 'SELECT * FROM Schedule WHERE station = $1'"], ["df[df.column_name.str.startswith('f')]"], ["print('\\t'.join(map(str, tab[0])))"], ["df = df[~df['col1'].isin(['value1', 'value2']) & ~df['col2'].isin(['value3', 'value4'])]"], ["print(\"Goals: {}, Penalties: {}\".format(self.goals, self.penalties))"], ["print(\"{} goals, ${}\".format(goals, penalties))"], ["print(\"{0.goals} goals, ${0.penalties}\".format(player))"], ["[int(i) for i in L]"], ["r = int(''.join(map(str, L)))"], ["[int(i) for i in L]"], ["with open('myfile', 'w') as f:"], ["list(filter(lambda x: x != 'X' or x != 'N', lst))"], ["import re"], ["df.apply(lambda x: x.value_counts().nonzero()[0].size)"], ["re.search(r'(?<!Distillr)\\\\\\\\AcroTray\\\\.exe', 'C:\\\\SomeDir\\\\AcroTray.exe')"], ["s = 'QH QD JC KD JS'"], ["re.findall(r'<.*?>', line)"], ["with open(filename, 'w') as f:"], ["datetime.datetime.strptime(str, '%Y-%m-%d %H:%M:%S.%f')"], ["thelist.index(['332', '333', '334'])"], ["text = re.sub(r'[^a-zA-Z0-9\\s]', '', text.lower())"], ["re.sub(r'[^a-zA-Z0-9\\s]', '', text).lower()"], ["plt.plot(x, y, label='H20')"], ["plt.plot(x, y, label='H20')"], ["for i in mylist:"], ["lst = [Object() for _ in range(100)]"], ["lst = [Object() for _ in range(100)]"], ["soup.find_all('a', href=lambda href: href and 'someclass' in href)"], ["df1.merge(df2, on='Date_Time')"], ["print('%s is a string' % str1)"], ["s.split(delimiter)"], ["import os"], ["import os"], ["import os"], ["import os"], ["text.replace('H3', 'H1')"], ["''.join(c for c in 'aas30dsa20' if c.isalpha())"], ["list(filter(lambda x: x.isdigit(), aas30dsa20))"], ["soup.find('name').text"], ["records = cursor.to_dict()"], ["C = np.concatenate((A, B), axis=0)"], ["np.concatenate((A, B), axis=0)"], ["with open(filepath, 'r') as f:"], ["l.count('a')"], ["from collections import Counter"], ["from collections import Counter"], ["from collections import Counter"], ["l.count('b')"], ["shutil.copy(srcfile, dstdir)"], ["max(x, key=lambda k: x[k] if x[k] != 0 else float('-inf'))"], ["max(k for k, v in x.items() if v != 0)"], ["max(k for k, v in x.items() if v)"], ["os.system('curl -s -o file.html https://www.example.com')"], ["df['c'] = df['b'] + df['a']"], ["d.pop('ele')"], ["MyModel.objects.filter(timestamp__gte=datetime.datetime.now()-datetime.timedelta(days=365*100)).update(timestamp=timestamp.replace(year=timestamp.year+100))"], ["['it', 'was', 'annoying']"], ["x = str(x).zfill(3) + 1"], ["df.index.is_monotonic"], ["list(t)"], ["tuple(t)"], ["list(level1)"], ["pprint.pprint(dataobject, stream=open('logFile', 'w'))"], ["df.loc[df['BoolCol'] == True, 'Index']"], ["df[df['BoolCol'] == True].index.tolist()"], ["df.loc[df['BoolCol'] == True].index.tolist()"], ["df[df['BoolCol'] == True].index.tolist()"], ["os.chdir('owd')"], ["c.execute(\"INSERT INTO testtable VALUES (?, ?)\", (testfield,))"], ["\"\\\\x89\\\\n\".decode('utf-8')"], ["str(raw_string)"], ["str(raw_byte_string)"], ["[s[i:j] for i, j in zip([0]+[k for k, g in groupby(s)], [k for k, g in groupby(s)])]"], ["plt.scatter(np.random.randn(100), np.random.randn(100), c=None)"], ["plt.scatter(x, y, marker='o')"], ["soup.find('div', {'id': 'main-content'}).decompose()"], ["df[df['ids'].str.contains('ball')]"], ["df.iloc[:,0] = df.iloc[:,0].astype(int)"], ["df['index1'] = df.index.values.tolist()"], ["df.index = df.index.to_series().str.split('/').apply(lambda x: x[0])"], ["b[::-1]"], ["tuple(a[i] + b[i] for i in range(len(a)))"], ["zip(a, b)"], ["','.join(map(str, list_of_ints))"], ["import requests"], ["s = \"abcd}def}\""], ["[x**2 for x in [1, 2, 3]]"], ["[(d['x'], d['y']) for d in d]"], ["filename = os.path.splitext('hemanth.txt')[0]"], ["d = {x[i]: x[i+1] for i in range(len(x)-1)}"], ["l = [item for sublist in [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']] for item in sublist]"], ["df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]"], ["df.replace('\\n', '<br>', regex=True)"], ["df.replace('\\n', '<br>', inplace=True)"], ["[word[i:i+2] for i in range(len(word)-1)]"], ["list(map(lambda x: (x[0], x[1]), word.split()))"], ["re.findall(r'https?://(?:[-\\w.]|(?:%[\\da-fA-F]{2}))+', myString)"], ["re.findall(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', myString)"], ["import re"], ["r = pd.date_range('2016-01-01', periods=13, freq='S')"], ["matrix = [[1, 2], [3, 4], [5, 6]]"], ["s.replace(' ', '_')"], ["os.path.abspath('mydir/myfile.txt')"], ["my_string.split()"], ["filename.split('.')[0]"], ["[sum(l[:i+1]) for i in range(len(l))]"], ["x.split('/')"], ["np.random.shuffle(r.T)"], ["df['D'] = df['B'].copy()"], ["import json"], ["all(predicate(char) for char in string)"], ["import os"], ["import sqlite3"], ["user_list = [int(x) for x in user_input.split()]"], ["x = [int(i) for i in user.split(',')]"], ["sorted(lst, key=lambda x: (x[0], x[1]))"], ["ut.sort(cmpfun, reverse=True)"], ["ut.sort(key=lambda x: x.count, reverse=True)"], ["ut.sort(key=lambda x: x.count, reverse=True)"], ["driver.find_element_by_xpath('//a[@href=\"Send\"]').click()"], ["driver.find_element_by_xpath(\"//a[text()='Send InMail']\").click()"], ["driver.find_element_by_xpath(\"//a[@href='Send InMail']\").click()"], ["'ME' + str(i)"], ["df.sort_values(by='column_name')"], ["with open('infile', 'r') as f:"], ["l.sort(key=lambda x: len(x[1]))"], ["s.split('d')"], ["re.search('ba[rzd]', 'foobarrrr') is not None"], ["t = list(set(t))"], ["source_list = list(set(source_list))"], ["list(set(abracadabra))"], ["list(a)"], ["list(a[0])"], ["soup.find_next_sibling('td').text"], ["['@'.join(map(str, x)) for x in l]"], ["['@'.join(map(str, x)) for x in l]"], ["driver.get(url)"], ["import re"], ["df.loc[(df['B'] > 50) & (df['C'] == 900)]"], ["sorted(o.items(), key=lambda x: x[0])"], ["sorted(d.keys())"], ["sorted(d.items(), key=lambda x: x[0])"], ["int(\"1\")"], ["def str_to_int(s):"], ["T1 = [int(i) for i in T1]"], ["subprocess.call(['./test.sh'])"], ["subprocess.call(['notepad'])"], ["[x for pair in zip(l1, l2) for x in pair]"], ["data = 'data to be encoded'"], ["data.encode('ascii')"], ["import csv"], ["my_object.my_str"], ["dict(zip(LD[0].keys(), zip(*LD)))"], ["sum(x[0] for x in list_of_tuples)"], ["dict(u\"{'code1':1,'code2':1}\".replace(\"u'\", \"\").replace(\"'\", \"\").split(\",\"))"], ["re.findall(r'\\$\\w+', mystring)"], ["re.sub(r'http\\S+', '', text)"], ["A[np.isin(A, [1, 3, 4])] = 0"], ["np.mean(a, axis=0)"], ["python -m rscript '/pathto/MyrScript.r'"], ["Rscript /usr/bin/Rscript --vanilla /pathto/MyrScript.r"], ["import csv"], ["df.fillna(df.mean(), inplace=True)"], ["datetime.datetime.fromtimestamp(1347517370).strftime('%Y-%m-%d %H:%M:%S')"], ["Derived.do()"], ["a[(a[:,0]==0) & (a[:,1]==1)]"], ["x = 'this is a test'.split()"], ["max(map(len, words))"], ["result[0]['from_user']"], ["with open('File.txt', 'r') as f:"], ["a = {v: k for k, v in a.items()}"], ["file = open('path/to/FILE_NAME.ext', 'w')"], ["df.groupby('column_name').size()"], ["any(key.startswith('EMP$$') for key in dict1.keys())"], ["[dict1[key] for key in dict1 if key.startswith('EMP$$')]"], ["df = pd.DataFrame({'email': sf, 'list': sf.str.split('@')[1]})"], ["print(*list, sep='\\t')"], ["print '\\xd0\\xbf\\xd1\\x80\\xd0\\xb8'.encode('utf-8')"], ["Sopet\\xc3\\xb3n.encode('utf-8')"], ["image.resize((x, y), Image.ANTIALIAS)"], ["re.findall(r'(?<=\\w)n(?=\\w)', s)"], ["print(f'{1/3*100:.2f}%')"], ["sorted(mylist, key=lambda x: x['title'])"], ["sorted(l, key=lambda x: x['title'])"], ["sorted(list_of_dicts, key=lambda x: (x['title'], x['title_url'], x['id']))"], ["[abs(x-y) for x,y in zip(l1,l2)]"], ["soup.find_all('span', class_='starGryB sp')"], ["df.to_sql('test', con=engine, if_exists='replace', schema='a_schema')"], ["s = s.replace('[','').replace(']','')"], ["L = list(set(L))"], ["with open(file, 'r') as f:"], ["testlist.index(1)"], ["testlist.index(1)"], ["testlist.index(1)"], ["testlist.index(1)"], ["testlist.index(1)"], ["testlist.index(element)"], ["testlist.index(element)"], ["max(lis, key=lambda x: x[1])[0]"], ["max(lis, key=lambda x: x[1])[0]"], ["time.sleep(1)"], ["','.join(map(str, L))"], ["class MyModel(models.Model):"], ["list5.sort(key=lambda x: x[1])"], ["sorted(list, key=lambda x: x[1], reverse=True)"], ["g = (x for x in y)"], ["[oldlist.pop(i) for i in removelist]"], ["file = open('yourfile.txt', 'w')"], ["getattr(obj, 'attr')"], ["tuple(tuple(x) for x in t)"], ["list(map(list, (('aa',), ('bb',), ('cc',))))"], ["df['column_name'] = df['column_name'].replace(old_value, new_value)"], ["list(zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)]))"], ["list(zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)]))"], ["original = [1, 2, 3, 4, 5, 6]"], ["original = [(1, 2), (3, 4), (5, 6)]"], ["list(zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]))"], ["a, b, c, d, e = zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )])"], ["json.dumps(Decimal('3.9'))"], ["d[\"mynewkey\"] = \"mynewvalue\""], ["data['a'] = 1"], ["data['a'] = 1"], ["data['a'] = 1"], ["max(max(row) for row in matrix)"], ["round(answer, 2)"], ["re.findall(r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', html_string)"], ["df[df['A'].duplicated(keep=False)]"], ["with open('myfile', 'r') as f:"], ["with open(filename.txt, 'r') as f:"], ["plt.colorbar(mappable=plt.cm.ScalarMappable(cmap='jet'), ax=ax)"], ["df['text'].value_counts().head(100)"], ["re.split(r'\\W+', s)"], ["[(1, 2), (1, 3), (2, 3)]"], ["datetime.datetime.utcnow().replace(tzinfo=datetime.timezone.utc)"], ["list2 = [x for x in list1 if x]"], ["list2 = [x for x in list1 if x]"], ["return JsonResponse({'data': data})"], ["re.sub(r'\\[.*?\\]', '', example_str)"], ["import re"], ["re.findall(r'\\((.*?)\\)', s)"], ["re.match('\\\\((.*?)\\\\)|(\\\\w)', '(zyx)bc').groups()"], ["re.findall('(zyx)|bc', '(zyx)bc')"], ["elements = ['a', 'b', 'c']"], ["subprocess.Popen(['python', 'background-process.py', 'arguments'])"], ["[mydict[key] for key in mykeys]"], ["dict(x)"], ["data[:, ::2] / data[:, 1::2]"], ["s.replace('\"', '\\\\\"')"], ["s.split()"], ["df.plot(kind='bar', stacked=True)"], ["myDictionary = {v: k for k, v in myDictionary.items()}"], ["[i for i, x in enumerate(myList) if 'how' in x and 'what' in x]"], ["isinstance(obj, str)"], ["isinstance(o, str)"], ["isinstance(o, str)"], ["isinstance(o, str)"], ["isinstance(obj_to_test, str)"], ["list2.extend(list1)"], ["list1.append(mylog)"], ["c.extend(a)"], ["list1.extend(mylog)"], ["b.append((a[0][0], a[0][2]))"], ["SECRET_KEY = 'Your_secret_string'"], ["df = pd.DataFrame(data=zip(*t), columns=['out-1', 'out-2'])"], ["stocks_list.index('MSFT')"], ["ax.set_xticklabels(ax.get_xticklabels(), rotation=45)"], ["s = s.translate(str.maketrans('', '', '!@#$%^&*()_+-='))"], ["import os"], ["re.findall(r'[0-7]+', str)"], ["re.split(r'\\s(?=[A-Z]+\\b)', input)"], ["input.split(' ')[::2]"], ["requests.post(url, files=files, headers=headers, data=data)"], ["with open(filename, 'wb') as f:"], ["[dct[i] for i in lst]"], ["x.groupby('name').size()[x.groupby('name').size() > 1]"], ["round(1.923328437452, 3)"], ["li.sort(key=lambda x: x[1], reverse=True)"], ["ax.set_xticks([0, 45, 90, 135, 180, 225, 270, 315])"], ["os.path.isabs(my_path)"], ["len(yourdict)"], ["len(yourdictfile.keys())"], ["df.groupby('id').first()"], ["df = pd.DataFrame(data, columns=['col1', 'col2', 'col3'])"], ["re.findall('src=\"js/([^\"]*\\\\bjquery\\\\b[^\"]*)\"', data)"], ["sum([int(x) for x in ['', '3.4', '', '', '1.0']])"], ["subprocess.call(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])"], ["q.reverse()"], ["df.groupby('group').bar(color=color)"], ["re.findall('([a-fA-F\\\\d]{32})', data)"], ["len(my_list)"], ["len(l)"], ["len(s)"], ["len(my_tuple)"], ["len(my_string)"], ["s = s.replace(\"\\\\a\", \"a\")"], ["''.join(['b' if c == 'a' else 'a' for c in 'obama'])"], ["shutil.rmtree('/folder_name')"], ["data['weekday'] = data['my_dt'].dt.weekday"], ["x.most_common()[::-1]"], ["x.sort(key=lambda x: x[1], reverse=True)"], ["np.append(a, b)"], ["np.concatenate((a, b), axis=0)"], ["np.concatenate((a, b), axis=1)"], ["np.concatenate((a, b), axis=0)"], ["np.concatenate((a, b), axis=0)"], ["import socket"], ["df['day'] = 'sat'"], ["return HttpResponseForbidden()"], ["app.config['TEMPLATES_AUTO_RELOAD'] = True"], ["session.add(t1)"], ["c2.sort(key=lambda x: x[2])"], ["sorted(list_of_lists, key=lambda x: x[0])"], ["sorted(list_of_lists, key=lambda x: x[0])"], ["plt.rcParams['font.family'] = 'Arial'"], ["df['date'] = pd.to_datetime(df['date'], format='%m/%d/%Y').dt.to_ordinal()"], ["element.get_attribute('outerHTML')"], ["df.loc[df['name'] == 'bob'].index[0]"], ["python3 -m pip install gnome-terminal"], ["my_dict['third_key'] = 1"], ["arr = [1, 2, 3, 4, 5]"], ["my_list.insert(2, 12)"], ["myList.insert(0, 'wuggah')"], ["bytes.fromhex(hex_string)"], ["df['last_column'] = df['column_name'].str[-1]"], ["df.loc[df['Letters'] == 'C', 'Numbers'].iloc[0]"], ["matrix = [[1, 2, 3], [4, 5, 6]]"], ["type(i)"], ["type(v)"], ["type(v)"], ["type(v)"], ["type(v)"], ["type(variable_name)"], ["next(itertools.islice(it, 4, 5))"], ["print(\"{}\".format(word))"], ["' '.join(list)"], ["y = [[], []]"], ["with open('C:/name/MyDocuments/numbers', 'r') as f:"], ["s = s.replace('i', '')"], ["s = s.replace('i', '')"], ["s = s.replace(\"i\", \"\")"], ["s = s.replace(char, '')"], ["df.dropna(subset=['1'], inplace=True)"], ["[x for x in myList if x.n == 30]"], ["nums = [int(x) for x in intstringlist]"], ["list(map(int, x))"], ["print \".\","], ["round(2.52 * 100)"], ["import os"], ["import os"], ["import os"], ["df.plot(legend=False)"], ["for x in range(1, 255):"], ["for x in range(1, 255):"], ["for x in range(1, 255):"], ["sum([int(x) for x in x])"], ["with open('target', 'w') as f:"], ["flat_list = [item for sublist in data for item in sublist]"], ["print('foo\\nbar')"], ["s = s.replace(',', '')"], ["np.mean(x[:-1], axis=0)"], ["np.mean(np.diff(x))"], ["arr = np.loadtxt('new.txt', dtype=str, encoding='utf-8')"], ["sorted(l, key=lambda x: x['time'], reverse=True)"], ["sorted(l, key=lambda x: x['time'], reverse=True)"], ["df[df['col'].str.contains('(Hel|Just)')]"], ["re.search('\\[(.*?)\\]', your_string).group(1)"], ["df['date'] = pd.to_datetime(df['date']).dt.strftime('%Y%m%d')"], ["s = 'The big brown fox is brown'"], ["import json"], ["urllib.request.urlretrieve(url, file_name)"], ["text.split(' ')"], ["text.split(\",\")"], ["line.split()"], ["s = [x.replace('.', ' ') for x in s]"], ["list_of_strings.sort(key=lambda s: s[1])"], ["vasp | tee tee_output"], ["lst = [x for x in lst if type(x) != str]"], ["[x for x in lst if not isinstance(x, str)]"], ["sorted(list_to_be_sorted, key=lambda x: x['name'])"], ["sorted(l, key=lambda x: x['name'], reverse=True)"], ["sorted(list_of_dicts, key=lambda x: x['value'])"], ["sorted(list_of_dicts, key=lambda x: x['value'])"], ["df.sort_values(by=['column_name'], ascending=False)"], ["','.join([trans[i]['category'] for i in trans])"], ["''.join(['A', 'B', 'C', 'D'])"], ["import requests"], ["sents = [x for x in sents if not x.startswith('@$\\t') and not x.startswith('#')]"], ["from django.utils import timezone"], ["sorted(list, key=lambda x: (x['points'], x['time']))"], ["datetime.datetime(1970, 1, 1).timestamp()"], ["long.file.name.suff"], ["import importlib"], ["number = 0xfloat(numlist)"], ["df.to_csv('filename.csv', index=False)"], ["import json"], ["ascii_list = [chr(i) for i in range(128)]"], ["with open(newFile, 'wb') as f:"], ["re.search(r'[A-Z][a-z]', string)"], ["dict.keys()[-1]"], ["f.write(\"hi there\")"], ["with open('myfile', 'w') as f:"], ["with open('somefile.txt', 'w') as f:"], ["s.encode('ascii')"], ["AuthorizedEmail.objects.all().aggregate(Max('added'))['added__max']"], ["import re"], ["re.findall(r'\\d+\\.\\d+', text)"], ["powershell.exe script.ps1"], ["b.sort(key=lambda x: x[2])"], ["cassandra.Client.keys(cf)"], ["datetime.datetime.now()"], ["lst = [1, 2, 3, True, False]"], ["a = [x-13 for x in a]"], ["import os"], ["np.max(np.abs(x))"], ["re.findall(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', s)"], ["re.findall(r'(?<!t)\\w+\\.\\w+', document)"], ["mystring.split(' ')"], ["file = open(path, 'r')"], ["sum([data[i][j] for i in range(len(data)) for j in range(len(data[0]))])"], ["a = np.array([[1, 2], [3, 4]])"]]